
LED panel driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027e0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001048  08002968  08002968  00012968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039b0  080039b0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080039b0  080039b0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039b0  080039b0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039b0  080039b0  000139b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039b4  080039b4  000139b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080039b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000060  08003a14  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08003a14  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007561  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001805  00000000  00000000  00027630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000828  00000000  00000000  00028e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000612  00000000  00000000  00029660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002578f  00000000  00000000  00029c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009210  00000000  00000000  0004f401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4619  00000000  00000000  00058611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002308  00000000  00000000  0013cc2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0013ef34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002950 	.word	0x08002950

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	08002950 	.word	0x08002950

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <send_command>:
struct shift_text shifter = { 0 };

#define spi_select()	HAL_GPIO_WritePin(LEDMX_CS_GPIO_Port, LEDMX_CS_Pin, GPIO_PIN_RESET)
#define spi_deselect()	HAL_GPIO_WritePin(LEDMX_CS_GPIO_Port, LEDMX_CS_Pin, GPIO_PIN_SET);

void send_command(uint8_t cmd, uint8_t data) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	460a      	mov	r2, r1
 80001e2:	71fb      	strb	r3, [r7, #7]
 80001e4:	4613      	mov	r3, r2
 80001e6:	71bb      	strb	r3, [r7, #6]
	uint8_t spi_data[2];

	spi_data[0] = cmd;
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	733b      	strb	r3, [r7, #12]
    spi_data[1] = data;
 80001ec:	79bb      	ldrb	r3, [r7, #6]
 80001ee:	737b      	strb	r3, [r7, #13]

    spi_select();
 80001f0:	2200      	movs	r2, #0
 80001f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001f6:	480b      	ldr	r0, [pc, #44]	; (8000224 <send_command+0x4c>)
 80001f8:	f001 f896 	bl	8001328 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, spi_data, 2, 1000);
 80001fc:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <send_command+0x50>)
 80001fe:	6818      	ldr	r0, [r3, #0]
 8000200:	f107 010c 	add.w	r1, r7, #12
 8000204:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000208:	2202      	movs	r2, #2
 800020a:	f001 ff74 	bl	80020f6 <HAL_SPI_Transmit>
    spi_deselect();
 800020e:	2201      	movs	r2, #1
 8000210:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <send_command+0x4c>)
 8000216:	f001 f887 	bl	8001328 <HAL_GPIO_WritePin>
}
 800021a:	bf00      	nop
 800021c:	3710      	adds	r7, #16
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	48001000 	.word	0x48001000
 8000228:	2000007c 	.word	0x2000007c

0800022c <send_data_rows>:
        HAL_SPI_Transmit(hspi, spi_data, 2, 1000);
    }
    spi_deselect();
}

void send_data_rows(uint8_t row, uint8_t* data) {
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	6039      	str	r1, [r7, #0]
 8000236:	71fb      	strb	r3, [r7, #7]
    uint i;
    uint8_t spi_data[2];

    spi_select();
 8000238:	2200      	movs	r2, #0
 800023a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <send_data_rows+0x64>)
 8000240:	f001 f872 	bl	8001328 <HAL_GPIO_WritePin>
    for (i = 0; i < segments; i++) {
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
 8000248:	e012      	b.n	8000270 <send_data_rows+0x44>
		spi_data[0] = row;
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	723b      	strb	r3, [r7, #8]
		spi_data[1] = data[i];
 800024e:	683a      	ldr	r2, [r7, #0]
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	4413      	add	r3, r2
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	727b      	strb	r3, [r7, #9]
        HAL_SPI_Transmit(hspi, spi_data, 2, 1000);
 8000258:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <send_data_rows+0x68>)
 800025a:	6818      	ldr	r0, [r3, #0]
 800025c:	f107 0108 	add.w	r1, r7, #8
 8000260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000264:	2202      	movs	r2, #2
 8000266:	f001 ff46 	bl	80020f6 <HAL_SPI_Transmit>
    for (i = 0; i < segments; i++) {
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	3301      	adds	r3, #1
 800026e:	60fb      	str	r3, [r7, #12]
 8000270:	4b09      	ldr	r3, [pc, #36]	; (8000298 <send_data_rows+0x6c>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	68fa      	ldr	r2, [r7, #12]
 8000276:	429a      	cmp	r2, r3
 8000278:	d3e7      	bcc.n	800024a <send_data_rows+0x1e>
    }
    spi_deselect();
 800027a:	2201      	movs	r2, #1
 800027c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000280:	4803      	ldr	r0, [pc, #12]	; (8000290 <send_data_rows+0x64>)
 8000282:	f001 f851 	bl	8001328 <HAL_GPIO_WritePin>
}
 8000286:	bf00      	nop
 8000288:	3710      	adds	r7, #16
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	48001000 	.word	0x48001000
 8000294:	2000007c 	.word	0x2000007c
 8000298:	20000080 	.word	0x20000080

0800029c <ledmx_init>:

void ledmx_init(SPI_HandleTypeDef* _hspi, uint s_width, uint s_height, char _odd_inverted) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b086      	sub	sp, #24
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	607a      	str	r2, [r7, #4]
 80002a8:	70fb      	strb	r3, [r7, #3]
	uint i;

	hspi = _hspi;
 80002aa:	4a24      	ldr	r2, [pc, #144]	; (800033c <ledmx_init+0xa0>)
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	6013      	str	r3, [r2, #0]
	segments = s_width * s_height;
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	687a      	ldr	r2, [r7, #4]
 80002b4:	fb02 f303 	mul.w	r3, r2, r3
 80002b8:	4a21      	ldr	r2, [pc, #132]	; (8000340 <ledmx_init+0xa4>)
 80002ba:	6013      	str	r3, [r2, #0]
	seg_width = s_width;
 80002bc:	4a21      	ldr	r2, [pc, #132]	; (8000344 <ledmx_init+0xa8>)
 80002be:	68bb      	ldr	r3, [r7, #8]
 80002c0:	6013      	str	r3, [r2, #0]
	seg_height = s_height;
 80002c2:	4a21      	ldr	r2, [pc, #132]	; (8000348 <ledmx_init+0xac>)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	6013      	str	r3, [r2, #0]
	odd_invert = _odd_inverted;
 80002c8:	4a20      	ldr	r2, [pc, #128]	; (800034c <ledmx_init+0xb0>)
 80002ca:	78fb      	ldrb	r3, [r7, #3]
 80002cc:	7013      	strb	r3, [r2, #0]

	PIXEL_ARRAY = malloc(segments * SEGMENT_RES);
 80002ce:	4b1c      	ldr	r3, [pc, #112]	; (8000340 <ledmx_init+0xa4>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	00db      	lsls	r3, r3, #3
 80002d4:	4618      	mov	r0, r3
 80002d6:	f002 f9e7 	bl	80026a8 <malloc>
 80002da:	4603      	mov	r3, r0
 80002dc:	461a      	mov	r2, r3
 80002de:	4b1c      	ldr	r3, [pc, #112]	; (8000350 <ledmx_init+0xb4>)
 80002e0:	601a      	str	r2, [r3, #0]

	send_command(TEST, 0);
 80002e2:	2100      	movs	r1, #0
 80002e4:	200f      	movs	r0, #15
 80002e6:	f7ff ff77 	bl	80001d8 <send_command>
	send_command(DECODE, 0);
 80002ea:	2100      	movs	r1, #0
 80002ec:	2009      	movs	r0, #9
 80002ee:	f7ff ff73 	bl	80001d8 <send_command>
	send_command(SCAN_LIMIT, 7);
 80002f2:	2107      	movs	r1, #7
 80002f4:	200b      	movs	r0, #11
 80002f6:	f7ff ff6f 	bl	80001d8 <send_command>
	send_command(INTENSITY, 4);
 80002fa:	2104      	movs	r1, #4
 80002fc:	200a      	movs	r0, #10
 80002fe:	f7ff ff6b 	bl	80001d8 <send_command>
	send_command(ENABLE, 1);
 8000302:	2101      	movs	r1, #1
 8000304:	200c      	movs	r0, #12
 8000306:	f7ff ff67 	bl	80001d8 <send_command>
	send_command(0xC, 1);
 800030a:	2101      	movs	r1, #1
 800030c:	200c      	movs	r0, #12
 800030e:	f7ff ff63 	bl	80001d8 <send_command>
    for (i = 0; i < segments; i++) {
 8000312:	2300      	movs	r3, #0
 8000314:	617b      	str	r3, [r7, #20]
 8000316:	e006      	b.n	8000326 <ledmx_init+0x8a>
        send_command(0, 0);
 8000318:	2100      	movs	r1, #0
 800031a:	2000      	movs	r0, #0
 800031c:	f7ff ff5c 	bl	80001d8 <send_command>
    for (i = 0; i < segments; i++) {
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	3301      	adds	r3, #1
 8000324:	617b      	str	r3, [r7, #20]
 8000326:	4b06      	ldr	r3, [pc, #24]	; (8000340 <ledmx_init+0xa4>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	697a      	ldr	r2, [r7, #20]
 800032c:	429a      	cmp	r2, r3
 800032e:	d3f3      	bcc.n	8000318 <ledmx_init+0x7c>
    }
}
 8000330:	bf00      	nop
 8000332:	bf00      	nop
 8000334:	3718      	adds	r7, #24
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	2000007c 	.word	0x2000007c
 8000340:	20000080 	.word	0x20000080
 8000344:	20000084 	.word	0x20000084
 8000348:	20000088 	.word	0x20000088
 800034c:	2000008c 	.word	0x2000008c
 8000350:	20000090 	.word	0x20000090

08000354 <ledmx_text>:
//		PIXEL_ARRAY[y*seg_width + x_offset + i] = temp;
//	}
//
//}

void ledmx_text(const char* text) {
 8000354:	b580      	push	{r7, lr}
 8000356:	b086      	sub	sp, #24
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
    char* c = text;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	617b      	str	r3, [r7, #20]
    uint seg, row;

    memset(PIXEL_ARRAY, 0, segments * SEGMENT_RES);
 8000360:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <ledmx_text+0x84>)
 8000362:	6818      	ldr	r0, [r3, #0]
 8000364:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <ledmx_text+0x88>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	00db      	lsls	r3, r3, #3
 800036a:	461a      	mov	r2, r3
 800036c:	2100      	movs	r1, #0
 800036e:	f002 fa57 	bl	8002820 <memset>
    for (seg = 0; *c != '\0' && seg < segments; c++, seg++) {
 8000372:	2300      	movs	r3, #0
 8000374:	613b      	str	r3, [r7, #16]
 8000376:	e022      	b.n	80003be <ledmx_text+0x6a>
        for (row = 0; row < SEGMENT_RES; row++) {
 8000378:	2300      	movs	r3, #0
 800037a:	60fb      	str	r3, [r7, #12]
 800037c:	e016      	b.n	80003ac <ledmx_text+0x58>
            PIXEL_ARRAY[row * segments + seg] = ASCII_TABLE_8X8[*c][row];
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	4917      	ldr	r1, [pc, #92]	; (80003e0 <ledmx_text+0x8c>)
 8000384:	00da      	lsls	r2, r3, #3
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	4413      	add	r3, r2
 800038a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800038e:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <ledmx_text+0x84>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	4b12      	ldr	r3, [pc, #72]	; (80003dc <ledmx_text+0x88>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	68f9      	ldr	r1, [r7, #12]
 8000398:	fb03 f101 	mul.w	r1, r3, r1
 800039c:	693b      	ldr	r3, [r7, #16]
 800039e:	440b      	add	r3, r1
 80003a0:	4413      	add	r3, r2
 80003a2:	b2c2      	uxtb	r2, r0
 80003a4:	701a      	strb	r2, [r3, #0]
        for (row = 0; row < SEGMENT_RES; row++) {
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	3301      	adds	r3, #1
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	2b07      	cmp	r3, #7
 80003b0:	d9e5      	bls.n	800037e <ledmx_text+0x2a>
    for (seg = 0; *c != '\0' && seg < segments; c++, seg++) {
 80003b2:	697b      	ldr	r3, [r7, #20]
 80003b4:	3301      	adds	r3, #1
 80003b6:	617b      	str	r3, [r7, #20]
 80003b8:	693b      	ldr	r3, [r7, #16]
 80003ba:	3301      	adds	r3, #1
 80003bc:	613b      	str	r3, [r7, #16]
 80003be:	697b      	ldr	r3, [r7, #20]
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d004      	beq.n	80003d0 <ledmx_text+0x7c>
 80003c6:	4b05      	ldr	r3, [pc, #20]	; (80003dc <ledmx_text+0x88>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	693a      	ldr	r2, [r7, #16]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d3d3      	bcc.n	8000378 <ledmx_text+0x24>
        }
    }
}
 80003d0:	bf00      	nop
 80003d2:	3718      	adds	r7, #24
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000090 	.word	0x20000090
 80003dc:	20000080 	.word	0x20000080
 80003e0:	08002970 	.word	0x08002970

080003e4 <ledmx_setup_shift_text>:

void ledmx_setup_shift_text(const char* text, uint space, enum ledmx_text_dir direction, uint ms) {
 80003e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80003e8:	b088      	sub	sp, #32
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	6178      	str	r0, [r7, #20]
 80003ee:	6139      	str	r1, [r7, #16]
 80003f0:	60bb      	str	r3, [r7, #8]
 80003f2:	4613      	mov	r3, r2
 80003f4:	73fb      	strb	r3, [r7, #15]
    uint len, i;

    len = strlen(text);
 80003f6:	6978      	ldr	r0, [r7, #20]
 80003f8:	f7ff fee6 	bl	80001c8 <strlen>
 80003fc:	61b8      	str	r0, [r7, #24]

    shifter.direction	= direction;
 80003fe:	4a3a      	ldr	r2, [pc, #232]	; (80004e8 <ledmx_setup_shift_text+0x104>)
 8000400:	7bfb      	ldrb	r3, [r7, #15]
 8000402:	7113      	strb	r3, [r2, #4]
    shifter.position    = 0;
 8000404:	4b38      	ldr	r3, [pc, #224]	; (80004e8 <ledmx_setup_shift_text+0x104>)
 8000406:	2200      	movs	r2, #0
 8000408:	629a      	str	r2, [r3, #40]	; 0x28
    shifter.length      = (len + space) * SEGMENT_RES;
 800040a:	69ba      	ldr	r2, [r7, #24]
 800040c:	693b      	ldr	r3, [r7, #16]
 800040e:	4413      	add	r3, r2
 8000410:	00db      	lsls	r3, r3, #3
 8000412:	4a35      	ldr	r2, [pc, #212]	; (80004e8 <ledmx_setup_shift_text+0x104>)
 8000414:	62d3      	str	r3, [r2, #44]	; 0x2c
    shifter.space       = space;
 8000416:	4a34      	ldr	r2, [pc, #208]	; (80004e8 <ledmx_setup_shift_text+0x104>)
 8000418:	693b      	ldr	r3, [r7, #16]
 800041a:	6313      	str	r3, [r2, #48]	; 0x30

    if (shifter.text) {
 800041c:	4b32      	ldr	r3, [pc, #200]	; (80004e8 <ledmx_setup_shift_text+0x104>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d004      	beq.n	800042e <ledmx_setup_shift_text+0x4a>
        free(shifter.text);
 8000424:	4b30      	ldr	r3, [pc, #192]	; (80004e8 <ledmx_setup_shift_text+0x104>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4618      	mov	r0, r3
 800042a:	f002 f945 	bl	80026b8 <free>
    }
    shifter.text = malloc(len + space + 1);
 800042e:	69ba      	ldr	r2, [r7, #24]
 8000430:	693b      	ldr	r3, [r7, #16]
 8000432:	4413      	add	r3, r2
 8000434:	3301      	adds	r3, #1
 8000436:	4618      	mov	r0, r3
 8000438:	f002 f936 	bl	80026a8 <malloc>
 800043c:	4603      	mov	r3, r0
 800043e:	461a      	mov	r2, r3
 8000440:	4b29      	ldr	r3, [pc, #164]	; (80004e8 <ledmx_setup_shift_text+0x104>)
 8000442:	601a      	str	r2, [r3, #0]
    strcpy(shifter.text, text);
 8000444:	4b28      	ldr	r3, [pc, #160]	; (80004e8 <ledmx_setup_shift_text+0x104>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	6979      	ldr	r1, [r7, #20]
 800044a:	4618      	mov	r0, r3
 800044c:	f002 fa2c 	bl	80028a8 <strcpy>
    for (i = 0; i < space; i++) {
 8000450:	2300      	movs	r3, #0
 8000452:	61fb      	str	r3, [r7, #28]
 8000454:	e00a      	b.n	800046c <ledmx_setup_shift_text+0x88>
        shifter.text[len + i] = ' ';
 8000456:	4b24      	ldr	r3, [pc, #144]	; (80004e8 <ledmx_setup_shift_text+0x104>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	69b9      	ldr	r1, [r7, #24]
 800045c:	69fb      	ldr	r3, [r7, #28]
 800045e:	440b      	add	r3, r1
 8000460:	4413      	add	r3, r2
 8000462:	2220      	movs	r2, #32
 8000464:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < space; i++) {
 8000466:	69fb      	ldr	r3, [r7, #28]
 8000468:	3301      	adds	r3, #1
 800046a:	61fb      	str	r3, [r7, #28]
 800046c:	69fa      	ldr	r2, [r7, #28]
 800046e:	693b      	ldr	r3, [r7, #16]
 8000470:	429a      	cmp	r2, r3
 8000472:	d3f0      	bcc.n	8000456 <ledmx_setup_shift_text+0x72>
    }
    shifter.text[len + space] = '\0';
 8000474:	4b1c      	ldr	r3, [pc, #112]	; (80004e8 <ledmx_setup_shift_text+0x104>)
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	69b9      	ldr	r1, [r7, #24]
 800047a:	693b      	ldr	r3, [r7, #16]
 800047c:	440b      	add	r3, r1
 800047e:	4413      	add	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	701a      	strb	r2, [r3, #0]

    shifter.ms        = ms;
 8000484:	68bb      	ldr	r3, [r7, #8]
 8000486:	2200      	movs	r2, #0
 8000488:	603b      	str	r3, [r7, #0]
 800048a:	607a      	str	r2, [r7, #4]
 800048c:	4b16      	ldr	r3, [pc, #88]	; (80004e8 <ledmx_setup_shift_text+0x104>)
 800048e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000492:	e9c3 1202 	strd	r1, r2, [r3, #8]
    shifter.ms_change = HAL_GetTick() + ms;
 8000496:	f000 fc93 	bl	8000dc0 <HAL_GetTick>
 800049a:	4602      	mov	r2, r0
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	4413      	add	r3, r2
 80004a0:	2200      	movs	r2, #0
 80004a2:	469a      	mov	sl, r3
 80004a4:	4693      	mov	fp, r2
 80004a6:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <ledmx_setup_shift_text+0x104>)
 80004a8:	e9c3 ab04 	strd	sl, fp, [r3, #16]
    shifter.ms_i_min  = ms < SHIFT_MS_MIN ? ms : SHIFT_MS_MIN;
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	2b0a      	cmp	r3, #10
 80004b0:	bf28      	it	cs
 80004b2:	230a      	movcs	r3, #10
 80004b4:	2200      	movs	r2, #0
 80004b6:	4698      	mov	r8, r3
 80004b8:	4691      	mov	r9, r2
 80004ba:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <ledmx_setup_shift_text+0x104>)
 80004bc:	e9c3 8906 	strd	r8, r9, [r3, #24]
    shifter.ms_i_max  = ms > SHIFT_MS_MAX ? ms : SHIFT_MS_MAX;
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80004c6:	bf38      	it	cc
 80004c8:	f44f 6396 	movcc.w	r3, #1200	; 0x4b0
 80004cc:	2200      	movs	r2, #0
 80004ce:	461c      	mov	r4, r3
 80004d0:	4615      	mov	r5, r2
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <ledmx_setup_shift_text+0x104>)
 80004d4:	e9c3 4508 	strd	r4, r5, [r3, #32]

    ledmx_text(text);
 80004d8:	6978      	ldr	r0, [r7, #20]
 80004da:	f7ff ff3b 	bl	8000354 <ledmx_text>
}
 80004de:	bf00      	nop
 80004e0:	3720      	adds	r7, #32
 80004e2:	46bd      	mov	sp, r7
 80004e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80004e8:	20000098 	.word	0x20000098

080004ec <text_redraw>:

static void text_redraw(void) {
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
    uint8_t shift_origin, shift_next;
    char* c;
    uint seg, row;

    shift_origin = shifter.position % SEGMENT_RES;
 80004f2:	4b6e      	ldr	r3, [pc, #440]	; (80006ac <text_redraw+0x1c0>)
 80004f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	f003 0307 	and.w	r3, r3, #7
 80004fc:	70fb      	strb	r3, [r7, #3]
    shift_next = 8 - shift_origin;
 80004fe:	78fb      	ldrb	r3, [r7, #3]
 8000500:	f1c3 0308 	rsb	r3, r3, #8
 8000504:	70bb      	strb	r3, [r7, #2]
    c = shifter.text + (shifter.position / SEGMENT_RES);
 8000506:	4b69      	ldr	r3, [pc, #420]	; (80006ac <text_redraw+0x1c0>)
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	4b68      	ldr	r3, [pc, #416]	; (80006ac <text_redraw+0x1c0>)
 800050c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800050e:	08db      	lsrs	r3, r3, #3
 8000510:	4413      	add	r3, r2
 8000512:	60fb      	str	r3, [r7, #12]

    seg = 0;
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]
    while (seg < segments) {
 8000518:	e0ba      	b.n	8000690 <text_redraw+0x1a4>
        if (seg > 0) {
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d057      	beq.n	80005d0 <text_redraw+0xe4>
            for (row = 0; row < SEGMENT_RES; row++) {
 8000520:	2300      	movs	r3, #0
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	e01a      	b.n	800055c <text_redraw+0x70>
            	PIXEL_ARRAY[row * segments + seg - 1] = (ASCII_TABLE_8X8[c[0]][row] >> shift_next);
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	4961      	ldr	r1, [pc, #388]	; (80006b0 <text_redraw+0x1c4>)
 800052c:	00da      	lsls	r2, r3, #3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4413      	add	r3, r2
 8000532:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000536:	78bb      	ldrb	r3, [r7, #2]
 8000538:	fa42 f003 	asr.w	r0, r2, r3
 800053c:	4b5d      	ldr	r3, [pc, #372]	; (80006b4 <text_redraw+0x1c8>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b5d      	ldr	r3, [pc, #372]	; (80006b8 <text_redraw+0x1cc>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	6879      	ldr	r1, [r7, #4]
 8000546:	fb03 f101 	mul.w	r1, r3, r1
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	440b      	add	r3, r1
 800054e:	3b01      	subs	r3, #1
 8000550:	4413      	add	r3, r2
 8000552:	b2c2      	uxtb	r2, r0
 8000554:	701a      	strb	r2, [r3, #0]
            for (row = 0; row < SEGMENT_RES; row++) {
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	3301      	adds	r3, #1
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b07      	cmp	r3, #7
 8000560:	d9e1      	bls.n	8000526 <text_redraw+0x3a>
            }
        }

        for (; c[1] != '\0' && seg < segments; c++, seg++) {
 8000562:	e035      	b.n	80005d0 <text_redraw+0xe4>
            for (row = 0; row < SEGMENT_RES; row++) {
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	e029      	b.n	80005be <text_redraw+0xd2>
                PIXEL_ARRAY[row * segments + seg] =
                    (ASCII_TABLE_8X8[c[0]][row] << shift_origin) |
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	4950      	ldr	r1, [pc, #320]	; (80006b0 <text_redraw+0x1c4>)
 8000570:	00da      	lsls	r2, r3, #3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4413      	add	r3, r2
 8000576:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800057a:	78fb      	ldrb	r3, [r7, #3]
 800057c:	fa02 f303 	lsl.w	r3, r2, r3
 8000580:	b25a      	sxtb	r2, r3
                    (ASCII_TABLE_8X8[c[1]][row] >> shift_next);
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	3301      	adds	r3, #1
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	4849      	ldr	r0, [pc, #292]	; (80006b0 <text_redraw+0x1c4>)
 800058a:	00d9      	lsls	r1, r3, #3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	440b      	add	r3, r1
 8000590:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8000594:	78bb      	ldrb	r3, [r7, #2]
 8000596:	fa41 f303 	asr.w	r3, r1, r3
                    (ASCII_TABLE_8X8[c[0]][row] << shift_origin) |
 800059a:	b25b      	sxtb	r3, r3
 800059c:	4313      	orrs	r3, r2
 800059e:	b258      	sxtb	r0, r3
                PIXEL_ARRAY[row * segments + seg] =
 80005a0:	4b44      	ldr	r3, [pc, #272]	; (80006b4 <text_redraw+0x1c8>)
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	4b44      	ldr	r3, [pc, #272]	; (80006b8 <text_redraw+0x1cc>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	6879      	ldr	r1, [r7, #4]
 80005aa:	fb03 f101 	mul.w	r1, r3, r1
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	440b      	add	r3, r1
 80005b2:	4413      	add	r3, r2
                    (ASCII_TABLE_8X8[c[0]][row] << shift_origin) |
 80005b4:	b2c2      	uxtb	r2, r0
                PIXEL_ARRAY[row * segments + seg] =
 80005b6:	701a      	strb	r2, [r3, #0]
            for (row = 0; row < SEGMENT_RES; row++) {
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	3301      	adds	r3, #1
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b07      	cmp	r3, #7
 80005c2:	d9d2      	bls.n	800056a <text_redraw+0x7e>
        for (; c[1] != '\0' && seg < segments; c++, seg++) {
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	3301      	adds	r3, #1
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	3301      	adds	r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	3301      	adds	r3, #1
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d004      	beq.n	80005e4 <text_redraw+0xf8>
 80005da:	4b37      	ldr	r3, [pc, #220]	; (80006b8 <text_redraw+0x1cc>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d3bf      	bcc.n	8000564 <text_redraw+0x78>
            }
        }

        if (seg < segments) {
 80005e4:	4b34      	ldr	r3, [pc, #208]	; (80006b8 <text_redraw+0x1cc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	68ba      	ldr	r2, [r7, #8]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d24d      	bcs.n	800068a <text_redraw+0x19e>
        	for (row = 0; row < SEGMENT_RES; row++) {
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	e019      	b.n	8000628 <text_redraw+0x13c>
        		PIXEL_ARRAY[row * segments + seg] = (ASCII_TABLE_8X8[*c][row] << shift_origin);
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	492d      	ldr	r1, [pc, #180]	; (80006b0 <text_redraw+0x1c4>)
 80005fa:	00da      	lsls	r2, r3, #3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4413      	add	r3, r2
 8000600:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000604:	78fb      	ldrb	r3, [r7, #3]
 8000606:	fa02 f003 	lsl.w	r0, r2, r3
 800060a:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <text_redraw+0x1c8>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	4b2a      	ldr	r3, [pc, #168]	; (80006b8 <text_redraw+0x1cc>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	fb03 f101 	mul.w	r1, r3, r1
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	440b      	add	r3, r1
 800061c:	4413      	add	r3, r2
 800061e:	b2c2      	uxtb	r2, r0
 8000620:	701a      	strb	r2, [r3, #0]
        	for (row = 0; row < SEGMENT_RES; row++) {
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	3301      	adds	r3, #1
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b07      	cmp	r3, #7
 800062c:	d9e2      	bls.n	80005f4 <text_redraw+0x108>
        	}
    		seg++;
 800062e:	68bb      	ldr	r3, [r7, #8]
 8000630:	3301      	adds	r3, #1
 8000632:	60bb      	str	r3, [r7, #8]

			if ('\0' == c[1] && seg >= segments) {
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	3301      	adds	r3, #1
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d125      	bne.n	800068a <text_redraw+0x19e>
 800063e:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <text_redraw+0x1cc>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	429a      	cmp	r2, r3
 8000646:	d320      	bcc.n	800068a <text_redraw+0x19e>
				for (row = 0; row < SEGMENT_RES; row++) {
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	e01a      	b.n	8000684 <text_redraw+0x198>
					PIXEL_ARRAY[row * segments + segments - 1] = (ASCII_TABLE_8X8[*shifter.text][row] >> shift_next);
 800064e:	4b17      	ldr	r3, [pc, #92]	; (80006ac <text_redraw+0x1c0>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	4916      	ldr	r1, [pc, #88]	; (80006b0 <text_redraw+0x1c4>)
 8000656:	00da      	lsls	r2, r3, #3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4413      	add	r3, r2
 800065c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8000660:	78bb      	ldrb	r3, [r7, #2]
 8000662:	fa42 f003 	asr.w	r0, r2, r3
 8000666:	4b13      	ldr	r3, [pc, #76]	; (80006b4 <text_redraw+0x1c8>)
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	3301      	adds	r3, #1
 800066e:	4912      	ldr	r1, [pc, #72]	; (80006b8 <text_redraw+0x1cc>)
 8000670:	6809      	ldr	r1, [r1, #0]
 8000672:	fb01 f303 	mul.w	r3, r1, r3
 8000676:	3b01      	subs	r3, #1
 8000678:	4413      	add	r3, r2
 800067a:	b2c2      	uxtb	r2, r0
 800067c:	701a      	strb	r2, [r3, #0]
				for (row = 0; row < SEGMENT_RES; row++) {
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	3301      	adds	r3, #1
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b07      	cmp	r3, #7
 8000688:	d9e1      	bls.n	800064e <text_redraw+0x162>
				}
			}
        }
		c = shifter.text;
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <text_redraw+0x1c0>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	60fb      	str	r3, [r7, #12]
    while (seg < segments) {
 8000690:	4b09      	ldr	r3, [pc, #36]	; (80006b8 <text_redraw+0x1cc>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	68ba      	ldr	r2, [r7, #8]
 8000696:	429a      	cmp	r2, r3
 8000698:	f4ff af3f 	bcc.w	800051a <text_redraw+0x2e>
    }
}
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000098 	.word	0x20000098
 80006b0:	08002970 	.word	0x08002970
 80006b4:	20000090 	.word	0x20000090
 80006b8:	20000080 	.word	0x20000080

080006bc <ledmx_shift_text>:

void ledmx_shift_text(void) {
 80006bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80006c0:	b082      	sub	sp, #8
 80006c2:	af00      	add	r7, sp, #0
    uint64_t ms_now;

    ms_now = HAL_GetTick();
 80006c4:	f000 fb7c 	bl	8000dc0 <HAL_GetTick>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2200      	movs	r2, #0
 80006cc:	4698      	mov	r8, r3
 80006ce:	4691      	mov	r9, r2
 80006d0:	e9c7 8900 	strd	r8, r9, [r7]
    if (ms_now < shifter.ms_change) {
 80006d4:	4b1e      	ldr	r3, [pc, #120]	; (8000750 <ledmx_shift_text+0x94>)
 80006d6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80006da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80006de:	4290      	cmp	r0, r2
 80006e0:	eb71 0303 	sbcs.w	r3, r1, r3
 80006e4:	d32e      	bcc.n	8000744 <ledmx_shift_text+0x88>
        return;
    }
    shifter.ms_change += shifter.ms;
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <ledmx_shift_text+0x94>)
 80006e8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <ledmx_shift_text+0x94>)
 80006ee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80006f2:	1884      	adds	r4, r0, r2
 80006f4:	eb41 0503 	adc.w	r5, r1, r3
 80006f8:	4b15      	ldr	r3, [pc, #84]	; (8000750 <ledmx_shift_text+0x94>)
 80006fa:	e9c3 4504 	strd	r4, r5, [r3, #16]

    if (left == shifter.direction) {
 80006fe:	4b14      	ldr	r3, [pc, #80]	; (8000750 <ledmx_shift_text+0x94>)
 8000700:	791b      	ldrb	r3, [r3, #4]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d105      	bne.n	8000712 <ledmx_shift_text+0x56>
    	shifter.position++;
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <ledmx_shift_text+0x94>)
 8000708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800070a:	3301      	adds	r3, #1
 800070c:	4a10      	ldr	r2, [pc, #64]	; (8000750 <ledmx_shift_text+0x94>)
 800070e:	6293      	str	r3, [r2, #40]	; 0x28
 8000710:	e004      	b.n	800071c <ledmx_shift_text+0x60>
    }
    else {
    	shifter.position--;
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <ledmx_shift_text+0x94>)
 8000714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000716:	3b01      	subs	r3, #1
 8000718:	4a0d      	ldr	r2, [pc, #52]	; (8000750 <ledmx_shift_text+0x94>)
 800071a:	6293      	str	r3, [r2, #40]	; 0x28
    }


    if (shifter.position >= shifter.length) {
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <ledmx_shift_text+0x94>)
 800071e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000720:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <ledmx_shift_text+0x94>)
 8000722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000724:	429a      	cmp	r2, r3
 8000726:	d30a      	bcc.n	800073e <ledmx_shift_text+0x82>
        shifter.position = left == shifter.direction ? 0 : shifter.length-1;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <ledmx_shift_text+0x94>)
 800072a:	791b      	ldrb	r3, [r3, #4]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d003      	beq.n	8000738 <ledmx_shift_text+0x7c>
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <ledmx_shift_text+0x94>)
 8000732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000734:	3b01      	subs	r3, #1
 8000736:	e000      	b.n	800073a <ledmx_shift_text+0x7e>
 8000738:	2300      	movs	r3, #0
 800073a:	4a05      	ldr	r2, [pc, #20]	; (8000750 <ledmx_shift_text+0x94>)
 800073c:	6293      	str	r3, [r2, #40]	; 0x28
    }


    text_redraw();
 800073e:	f7ff fed5 	bl	80004ec <text_redraw>
 8000742:	e000      	b.n	8000746 <ledmx_shift_text+0x8a>
        return;
 8000744:	bf00      	nop
}
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800074e:	bf00      	nop
 8000750:	20000098 	.word	0x20000098

08000754 <ledmx_set_text_dir>:

void ledmx_set_text_dir(enum ledmx_text_dir direction) {
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	shifter.direction = direction;
 800075e:	4a04      	ldr	r2, [pc, #16]	; (8000770 <ledmx_set_text_dir+0x1c>)
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	7113      	strb	r3, [r2, #4]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr
 8000770:	20000098 	.word	0x20000098

08000774 <ledmx_text_speed_up>:

void ledmx_text_speed_up(void) {
 8000774:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000778:	af00      	add	r7, sp, #0
	if (shifter.ms <= (shifter.ms_i_min + SHIFT_MS_STEP)) {
 800077a:	4912      	ldr	r1, [pc, #72]	; (80007c4 <ledmx_text_speed_up+0x50>)
 800077c:	e9d1 8902 	ldrd	r8, r9, [r1, #8]
 8000780:	4910      	ldr	r1, [pc, #64]	; (80007c4 <ledmx_text_speed_up+0x50>)
 8000782:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 8000786:	f110 020a 	adds.w	r2, r0, #10
 800078a:	f141 0300 	adc.w	r3, r1, #0
 800078e:	4542      	cmp	r2, r8
 8000790:	eb73 0309 	sbcs.w	r3, r3, r9
 8000794:	d306      	bcc.n	80007a4 <ledmx_text_speed_up+0x30>
		shifter.ms = shifter.ms_i_min;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <ledmx_text_speed_up+0x50>)
 8000798:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800079c:	4909      	ldr	r1, [pc, #36]	; (80007c4 <ledmx_text_speed_up+0x50>)
 800079e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	else {
		shifter.ms -= SHIFT_MS_STEP;
	}
}
 80007a2:	e009      	b.n	80007b8 <ledmx_text_speed_up+0x44>
		shifter.ms -= SHIFT_MS_STEP;
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <ledmx_text_speed_up+0x50>)
 80007a6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80007aa:	f1b2 040a 	subs.w	r4, r2, #10
 80007ae:	f143 35ff 	adc.w	r5, r3, #4294967295
 80007b2:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <ledmx_text_speed_up+0x50>)
 80007b4:	e9c3 4502 	strd	r4, r5, [r3, #8]
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000098 	.word	0x20000098

080007c8 <ledmx_text_slow_down>:

void ledmx_text_slow_down(void) {
 80007c8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80007cc:	af00      	add	r7, sp, #0
	if (shifter.ms >= (shifter.ms_i_max - SHIFT_MS_STEP)) {
 80007ce:	4912      	ldr	r1, [pc, #72]	; (8000818 <ledmx_text_slow_down+0x50>)
 80007d0:	e9d1 8902 	ldrd	r8, r9, [r1, #8]
 80007d4:	4910      	ldr	r1, [pc, #64]	; (8000818 <ledmx_text_slow_down+0x50>)
 80007d6:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 80007da:	f1b0 020a 	subs.w	r2, r0, #10
 80007de:	f141 33ff 	adc.w	r3, r1, #4294967295
 80007e2:	4590      	cmp	r8, r2
 80007e4:	eb79 0303 	sbcs.w	r3, r9, r3
 80007e8:	d306      	bcc.n	80007f8 <ledmx_text_slow_down+0x30>
		shifter.ms = shifter.ms_i_max;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <ledmx_text_slow_down+0x50>)
 80007ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80007f0:	4909      	ldr	r1, [pc, #36]	; (8000818 <ledmx_text_slow_down+0x50>)
 80007f2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	else {
		shifter.ms += SHIFT_MS_STEP;
	}
}
 80007f6:	e009      	b.n	800080c <ledmx_text_slow_down+0x44>
		shifter.ms += SHIFT_MS_STEP;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <ledmx_text_slow_down+0x50>)
 80007fa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80007fe:	f112 040a 	adds.w	r4, r2, #10
 8000802:	f143 0500 	adc.w	r5, r3, #0
 8000806:	4b04      	ldr	r3, [pc, #16]	; (8000818 <ledmx_text_slow_down+0x50>)
 8000808:	e9c3 4502 	strd	r4, r5, [r3, #8]
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000098 	.word	0x20000098

0800081c <ledmx_display>:

void ledmx_display(void) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
	//	for (row = 0; row < SEGMENT_RES; row++) {
    //        send_data(seg, row + 1, PIXEL_ARRAY[row * segments + seg]);
    //    }
	//}

	for (row = 0; row < SEGMENT_RES; row++) {
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	e011      	b.n	800084c <ledmx_display+0x30>
		send_data_rows(row+1, PIXEL_ARRAY + (row * segments));
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	3301      	adds	r3, #1
 800082e:	b2d8      	uxtb	r0, r3
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <ledmx_display+0x40>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <ledmx_display+0x44>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	6879      	ldr	r1, [r7, #4]
 800083a:	fb01 f303 	mul.w	r3, r1, r3
 800083e:	4413      	add	r3, r2
 8000840:	4619      	mov	r1, r3
 8000842:	f7ff fcf3 	bl	800022c <send_data_rows>
	for (row = 0; row < SEGMENT_RES; row++) {
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	3301      	adds	r3, #1
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b07      	cmp	r3, #7
 8000850:	d9ea      	bls.n	8000828 <ledmx_display+0xc>
	}
}
 8000852:	bf00      	nop
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20000090 	.word	0x20000090
 8000860:	20000080 	.word	0x20000080

08000864 <ledmx_clear>:

void ledmx_clear(void) {
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	uint i, j;

	memset(PIXEL_ARRAY, 0, segments * SEGMENT_RES);
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <ledmx_clear+0x20>)
 800086a:	6818      	ldr	r0, [r3, #0]
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <ledmx_clear+0x24>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	00db      	lsls	r3, r3, #3
 8000872:	461a      	mov	r2, r3
 8000874:	2100      	movs	r1, #0
 8000876:	f001 ffd3 	bl	8002820 <memset>
	ledmx_display();
 800087a:	f7ff ffcf 	bl	800081c <ledmx_display>
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000090 	.word	0x20000090
 8000888:	20000080 	.word	0x20000080

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000890:	f000 fa2d 	bl	8000cee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000894:	f000 f850 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000898:	f000 f8d2 	bl	8000a40 <MX_GPIO_Init>
  MX_SPI1_Init();
 800089c:	f000 f892 	bl	80009c4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ledmx_init(&hspi1, LEDMATRIX_SEGMENTS_W, LEDMATRIX_SEGMENTS_H, true);
 80008a0:	2301      	movs	r3, #1
 80008a2:	2201      	movs	r2, #1
 80008a4:	210c      	movs	r1, #12
 80008a6:	4822      	ldr	r0, [pc, #136]	; (8000930 <main+0xa4>)
 80008a8:	f7ff fcf8 	bl	800029c <ledmx_init>
  ledmx_clear();
 80008ac:	f7ff ffda 	bl	8000864 <ledmx_clear>
  //ledmx_text("Hello World!");
  ledmx_setup_shift_text("Hello", 5, left, 100);
 80008b0:	2364      	movs	r3, #100	; 0x64
 80008b2:	2200      	movs	r2, #0
 80008b4:	2105      	movs	r1, #5
 80008b6:	481f      	ldr	r0, [pc, #124]	; (8000934 <main+0xa8>)
 80008b8:	f7ff fd94 	bl	80003e4 <ledmx_setup_shift_text>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin)) {
 80008bc:	2120      	movs	r1, #32
 80008be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c2:	f000 fd19 	bl	80012f8 <HAL_GPIO_ReadPin>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d002      	beq.n	80008d2 <main+0x46>
		  ledmx_text_slow_down();
 80008cc:	f7ff ff7c 	bl	80007c8 <ledmx_text_slow_down>
 80008d0:	e009      	b.n	80008e6 <main+0x5a>
	  }
	  else if (HAL_GPIO_ReadPin(JOY_UP_GPIO_Port, JOY_UP_Pin)) {
 80008d2:	2108      	movs	r1, #8
 80008d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d8:	f000 fd0e 	bl	80012f8 <HAL_GPIO_ReadPin>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <main+0x5a>
		  ledmx_text_speed_up();
 80008e2:	f7ff ff47 	bl	8000774 <ledmx_text_speed_up>
	  }

	  if (HAL_GPIO_ReadPin(JOY_LEFT_GPIO_Port, JOY_LEFT_Pin)) {
 80008e6:	2102      	movs	r1, #2
 80008e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ec:	f000 fd04 	bl	80012f8 <HAL_GPIO_ReadPin>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d003      	beq.n	80008fe <main+0x72>
		  ledmx_set_text_dir(left);
 80008f6:	2000      	movs	r0, #0
 80008f8:	f7ff ff2c 	bl	8000754 <ledmx_set_text_dir>
 80008fc:	e00a      	b.n	8000914 <main+0x88>
	  }
	  else if (HAL_GPIO_ReadPin(JOY_RIGHT_GPIO_Port, JOY_RIGHT_Pin)) {
 80008fe:	2104      	movs	r1, #4
 8000900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000904:	f000 fcf8 	bl	80012f8 <HAL_GPIO_ReadPin>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d002      	beq.n	8000914 <main+0x88>
		  ledmx_set_text_dir(right);
 800090e:	2001      	movs	r0, #1
 8000910:	f7ff ff20 	bl	8000754 <ledmx_set_text_dir>

	  }

	  if (!HAL_GPIO_ReadPin(JOY_CENTER_GPIO_Port, JOY_CENTER_Pin)) {
 8000914:	2101      	movs	r1, #1
 8000916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091a:	f000 fced 	bl	80012f8 <HAL_GPIO_ReadPin>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d1cb      	bne.n	80008bc <main+0x30>
		  ledmx_shift_text();
 8000924:	f7ff feca 	bl	80006bc <ledmx_shift_text>
		  ledmx_display();
 8000928:	f7ff ff78 	bl	800081c <ledmx_display>
	  if (HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin)) {
 800092c:	e7c6      	b.n	80008bc <main+0x30>
 800092e:	bf00      	nop
 8000930:	200000d0 	.word	0x200000d0
 8000934:	08002968 	.word	0x08002968

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b096      	sub	sp, #88	; 0x58
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	2244      	movs	r2, #68	; 0x44
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f001 ff6a 	bl	8002820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094c:	463b      	mov	r3, r7
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800095a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800095e:	f000 fd09 	bl	8001374 <HAL_PWREx_ControlVoltageScaling>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000968:	f000 f8b8 	bl	8000adc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800096c:	2310      	movs	r3, #16
 800096e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000970:	2301      	movs	r3, #1
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000978:	2360      	movs	r3, #96	; 0x60
 800097a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800097c:	2300      	movs	r3, #0
 800097e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4618      	mov	r0, r3
 8000986:	f000 fd4b 	bl	8001420 <HAL_RCC_OscConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000990:	f000 f8a4 	bl	8000adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000994:	230f      	movs	r3, #15
 8000996:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000998:	2300      	movs	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009a8:	463b      	mov	r3, r7
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f001 f913 	bl	8001bd8 <HAL_RCC_ClockConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80009b8:	f000 f890 	bl	8000adc <Error_Handler>
  }
}
 80009bc:	bf00      	nop
 80009be:	3758      	adds	r7, #88	; 0x58
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <MX_SPI1_Init+0x74>)
 80009ca:	4a1c      	ldr	r2, [pc, #112]	; (8000a3c <MX_SPI1_Init+0x78>)
 80009cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_SPI1_Init+0x74>)
 80009d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_SPI1_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009dc:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <MX_SPI1_Init+0x74>)
 80009de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_SPI1_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_SPI1_Init+0x74>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_SPI1_Init+0x74>)
 80009f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_SPI1_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_SPI1_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_SPI1_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_SPI1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_SPI1_Init+0x74>)
 8000a12:	2207      	movs	r2, #7
 8000a14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MX_SPI1_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_SPI1_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_SPI1_Init+0x74>)
 8000a24:	f001 fac4 	bl	8001fb0 <HAL_SPI_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a2e:	f000 f855 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000d0 	.word	0x200000d0
 8000a3c:	40013000 	.word	0x40013000

08000a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 030c 	add.w	r3, r7, #12
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <MX_GPIO_Init+0x94>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	4a1e      	ldr	r2, [pc, #120]	; (8000ad4 <MX_GPIO_Init+0x94>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <MX_GPIO_Init+0x94>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a6e:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <MX_GPIO_Init+0x94>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	4a18      	ldr	r2, [pc, #96]	; (8000ad4 <MX_GPIO_Init+0x94>)
 8000a74:	f043 0310 	orr.w	r3, r3, #16
 8000a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7a:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <MX_GPIO_Init+0x94>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	f003 0310 	and.w	r3, r3, #16
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDMX_CS_GPIO_Port, LEDMX_CS_Pin, GPIO_PIN_SET);
 8000a86:	2201      	movs	r2, #1
 8000a88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a8c:	4812      	ldr	r0, [pc, #72]	; (8000ad8 <MX_GPIO_Init+0x98>)
 8000a8e:	f000 fc4b 	bl	8001328 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_CENTER_Pin JOY_LEFT_Pin JOY_RIGHT_Pin JOY_UP_Pin
                           JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin
 8000a92:	232f      	movs	r3, #47	; 0x2f
 8000a94:	60fb      	str	r3, [r7, #12]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa8:	f000 fa7c 	bl	8000fa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDMX_CS_Pin */
  GPIO_InitStruct.Pin = LEDMX_CS_Pin;
 8000aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LEDMX_CS_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <MX_GPIO_Init+0x98>)
 8000ac6:	f000 fa6d 	bl	8000fa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aca:	bf00      	nop
 8000acc:	3720      	adds	r7, #32
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	48001000 	.word	0x48001000

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <Error_Handler+0x8>
	...

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <HAL_MspInit+0x44>)
 8000af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af2:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <HAL_MspInit+0x44>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6613      	str	r3, [r2, #96]	; 0x60
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <HAL_MspInit+0x44>)
 8000afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_MspInit+0x44>)
 8000b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0a:	4a08      	ldr	r2, [pc, #32]	; (8000b2c <HAL_MspInit+0x44>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b10:	6593      	str	r3, [r2, #88]	; 0x58
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_MspInit+0x44>)
 8000b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40021000 	.word	0x40021000

08000b30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a17      	ldr	r2, [pc, #92]	; (8000bac <HAL_SPI_MspInit+0x7c>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d128      	bne.n	8000ba4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <HAL_SPI_MspInit+0x80>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a16      	ldr	r2, [pc, #88]	; (8000bb0 <HAL_SPI_MspInit+0x80>)
 8000b58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <HAL_SPI_MspInit+0x80>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <HAL_SPI_MspInit+0x80>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	4a10      	ldr	r2, [pc, #64]	; (8000bb0 <HAL_SPI_MspInit+0x80>)
 8000b70:	f043 0310 	orr.w	r3, r3, #16
 8000b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <HAL_SPI_MspInit+0x80>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	f003 0310 	and.w	r3, r3, #16
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PE13     ------> SPI1_SCK
    PE15     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000b82:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b94:	2305      	movs	r3, #5
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <HAL_SPI_MspInit+0x84>)
 8000ba0:	f000 fa00 	bl	8000fa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ba4:	bf00      	nop
 8000ba6:	3728      	adds	r7, #40	; 0x28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40013000 	.word	0x40013000
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	48001000 	.word	0x48001000

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c04:	f000 f8c8 	bl	8000d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c14:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <_sbrk+0x5c>)
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <_sbrk+0x60>)
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <_sbrk+0x64>)
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <_sbrk+0x68>)
 8000c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d207      	bcs.n	8000c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c3c:	f001 fe08 	bl	8002850 <__errno>
 8000c40:	4603      	mov	r3, r0
 8000c42:	220c      	movs	r2, #12
 8000c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4a:	e009      	b.n	8000c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <_sbrk+0x64>)
 8000c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20018000 	.word	0x20018000
 8000c6c:	00000400 	.word	0x00000400
 8000c70:	20000134 	.word	0x20000134
 8000c74:	20000288 	.word	0x20000288

08000c78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <SystemInit+0x20>)
 8000c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <SystemInit+0x20>)
 8000c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ca0:	f7ff ffea 	bl	8000c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca4:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ca6:	490d      	ldr	r1, [pc, #52]	; (8000cdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <LoopForever+0xe>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cbc:	4c0a      	ldr	r4, [pc, #40]	; (8000ce8 <LoopForever+0x16>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cca:	f001 fdc7 	bl	800285c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cce:	f7ff fddd 	bl	800088c <main>

08000cd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cd2:	e7fe      	b.n	8000cd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cdc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ce0:	080039b8 	.word	0x080039b8
  ldr r2, =_sbss
 8000ce4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ce8:	20000284 	.word	0x20000284

08000cec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC1_2_IRQHandler>

08000cee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 f91f 	bl	8000f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cfe:	200f      	movs	r0, #15
 8000d00:	f000 f80e 	bl	8000d20 <HAL_InitTick>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d002      	beq.n	8000d10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	71fb      	strb	r3, [r7, #7]
 8000d0e:	e001      	b.n	8000d14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d10:	f7ff feea 	bl	8000ae8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d14:	79fb      	ldrb	r3, [r7, #7]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d2c:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <HAL_InitTick+0x6c>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d023      	beq.n	8000d7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <HAL_InitTick+0x70>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <HAL_InitTick+0x6c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 f91d 	bl	8000f8a <HAL_SYSTICK_Config>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d10f      	bne.n	8000d76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b0f      	cmp	r3, #15
 8000d5a:	d809      	bhi.n	8000d70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f000 f8f5 	bl	8000f52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d68:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <HAL_InitTick+0x74>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	e007      	b.n	8000d80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	73fb      	strb	r3, [r7, #15]
 8000d74:	e004      	b.n	8000d80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	73fb      	strb	r3, [r7, #15]
 8000d7a:	e001      	b.n	8000d80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000004 	.word	0x20000004

08000d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x20>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x24>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_IncTick+0x24>)
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000138 	.word	0x20000138

08000dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_GetTick+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000138 	.word	0x20000138

08000dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df4:	4013      	ands	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0a:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	60d3      	str	r3, [r2, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <__NVIC_GetPriorityGrouping+0x18>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	f003 0307 	and.w	r3, r3, #7
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db0a      	blt.n	8000e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	490c      	ldr	r1, [pc, #48]	; (8000e88 <__NVIC_SetPriority+0x4c>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	440b      	add	r3, r1
 8000e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e64:	e00a      	b.n	8000e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4908      	ldr	r1, [pc, #32]	; (8000e8c <__NVIC_SetPriority+0x50>)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	3b04      	subs	r3, #4
 8000e74:	0112      	lsls	r2, r2, #4
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	761a      	strb	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	; 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f1c3 0307 	rsb	r3, r3, #7
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf28      	it	cs
 8000eae:	2304      	movcs	r3, #4
 8000eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d902      	bls.n	8000ec0 <NVIC_EncodePriority+0x30>
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3b03      	subs	r3, #3
 8000ebe:	e000      	b.n	8000ec2 <NVIC_EncodePriority+0x32>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43d9      	mvns	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	4313      	orrs	r3, r2
         );
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3724      	adds	r7, #36	; 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
	...

08000ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f08:	d301      	bcc.n	8000f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00f      	b.n	8000f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <SysTick_Config+0x40>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f16:	210f      	movs	r1, #15
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f7ff ff8e 	bl	8000e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <SysTick_Config+0x40>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <SysTick_Config+0x40>)
 8000f28:	2207      	movs	r2, #7
 8000f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	e000e010 	.word	0xe000e010

08000f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ff47 	bl	8000dd8 <__NVIC_SetPriorityGrouping>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b086      	sub	sp, #24
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f64:	f7ff ff5c 	bl	8000e20 <__NVIC_GetPriorityGrouping>
 8000f68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	68b9      	ldr	r1, [r7, #8]
 8000f6e:	6978      	ldr	r0, [r7, #20]
 8000f70:	f7ff ff8e 	bl	8000e90 <NVIC_EncodePriority>
 8000f74:	4602      	mov	r2, r0
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff5d 	bl	8000e3c <__NVIC_SetPriority>
}
 8000f82:	bf00      	nop
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ffb0 	bl	8000ef8 <SysTick_Config>
 8000f98:	4603      	mov	r3, r0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb2:	e17f      	b.n	80012b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	2101      	movs	r1, #1
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 8171 	beq.w	80012ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d005      	beq.n	8000fe4 <HAL_GPIO_Init+0x40>
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d130      	bne.n	8001046 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	2203      	movs	r2, #3
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	68da      	ldr	r2, [r3, #12]
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	4313      	orrs	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800101a:	2201      	movs	r2, #1
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	091b      	lsrs	r3, r3, #4
 8001030:	f003 0201 	and.w	r2, r3, #1
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	2b03      	cmp	r3, #3
 8001050:	d118      	bne.n	8001084 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001056:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001058:	2201      	movs	r2, #1
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	08db      	lsrs	r3, r3, #3
 800106e:	f003 0201 	and.w	r2, r3, #1
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	2b03      	cmp	r3, #3
 800108e:	d017      	beq.n	80010c0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d123      	bne.n	8001114 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	08da      	lsrs	r2, r3, #3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3208      	adds	r2, #8
 80010d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f003 0307 	and.w	r3, r3, #7
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	691a      	ldr	r2, [r3, #16]
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	08da      	lsrs	r2, r3, #3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3208      	adds	r2, #8
 800110e:	6939      	ldr	r1, [r7, #16]
 8001110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	2203      	movs	r2, #3
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0203 	and.w	r2, r3, #3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4313      	orrs	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001150:	2b00      	cmp	r3, #0
 8001152:	f000 80ac 	beq.w	80012ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001156:	4b5f      	ldr	r3, [pc, #380]	; (80012d4 <HAL_GPIO_Init+0x330>)
 8001158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115a:	4a5e      	ldr	r2, [pc, #376]	; (80012d4 <HAL_GPIO_Init+0x330>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6613      	str	r3, [r2, #96]	; 0x60
 8001162:	4b5c      	ldr	r3, [pc, #368]	; (80012d4 <HAL_GPIO_Init+0x330>)
 8001164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800116e:	4a5a      	ldr	r2, [pc, #360]	; (80012d8 <HAL_GPIO_Init+0x334>)
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3302      	adds	r3, #2
 8001176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001198:	d025      	beq.n	80011e6 <HAL_GPIO_Init+0x242>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4f      	ldr	r2, [pc, #316]	; (80012dc <HAL_GPIO_Init+0x338>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d01f      	beq.n	80011e2 <HAL_GPIO_Init+0x23e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4e      	ldr	r2, [pc, #312]	; (80012e0 <HAL_GPIO_Init+0x33c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d019      	beq.n	80011de <HAL_GPIO_Init+0x23a>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4d      	ldr	r2, [pc, #308]	; (80012e4 <HAL_GPIO_Init+0x340>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d013      	beq.n	80011da <HAL_GPIO_Init+0x236>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4c      	ldr	r2, [pc, #304]	; (80012e8 <HAL_GPIO_Init+0x344>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d00d      	beq.n	80011d6 <HAL_GPIO_Init+0x232>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4b      	ldr	r2, [pc, #300]	; (80012ec <HAL_GPIO_Init+0x348>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d007      	beq.n	80011d2 <HAL_GPIO_Init+0x22e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4a      	ldr	r2, [pc, #296]	; (80012f0 <HAL_GPIO_Init+0x34c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d101      	bne.n	80011ce <HAL_GPIO_Init+0x22a>
 80011ca:	2306      	movs	r3, #6
 80011cc:	e00c      	b.n	80011e8 <HAL_GPIO_Init+0x244>
 80011ce:	2307      	movs	r3, #7
 80011d0:	e00a      	b.n	80011e8 <HAL_GPIO_Init+0x244>
 80011d2:	2305      	movs	r3, #5
 80011d4:	e008      	b.n	80011e8 <HAL_GPIO_Init+0x244>
 80011d6:	2304      	movs	r3, #4
 80011d8:	e006      	b.n	80011e8 <HAL_GPIO_Init+0x244>
 80011da:	2303      	movs	r3, #3
 80011dc:	e004      	b.n	80011e8 <HAL_GPIO_Init+0x244>
 80011de:	2302      	movs	r3, #2
 80011e0:	e002      	b.n	80011e8 <HAL_GPIO_Init+0x244>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <HAL_GPIO_Init+0x244>
 80011e6:	2300      	movs	r3, #0
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	f002 0203 	and.w	r2, r2, #3
 80011ee:	0092      	lsls	r2, r2, #2
 80011f0:	4093      	lsls	r3, r2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011f8:	4937      	ldr	r1, [pc, #220]	; (80012d8 <HAL_GPIO_Init+0x334>)
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	089b      	lsrs	r3, r3, #2
 80011fe:	3302      	adds	r3, #2
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001206:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <HAL_GPIO_Init+0x350>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	43db      	mvns	r3, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800122a:	4a32      	ldr	r2, [pc, #200]	; (80012f4 <HAL_GPIO_Init+0x350>)
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001230:	4b30      	ldr	r3, [pc, #192]	; (80012f4 <HAL_GPIO_Init+0x350>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	43db      	mvns	r3, r3
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001254:	4a27      	ldr	r2, [pc, #156]	; (80012f4 <HAL_GPIO_Init+0x350>)
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800125a:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <HAL_GPIO_Init+0x350>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	43db      	mvns	r3, r3
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	4013      	ands	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4313      	orrs	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800127e:	4a1d      	ldr	r2, [pc, #116]	; (80012f4 <HAL_GPIO_Init+0x350>)
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <HAL_GPIO_Init+0x350>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	43db      	mvns	r3, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012a8:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <HAL_GPIO_Init+0x350>)
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3301      	adds	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa22 f303 	lsr.w	r3, r2, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f47f ae78 	bne.w	8000fb4 <HAL_GPIO_Init+0x10>
  }
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	371c      	adds	r7, #28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010000 	.word	0x40010000
 80012dc:	48000400 	.word	0x48000400
 80012e0:	48000800 	.word	0x48000800
 80012e4:	48000c00 	.word	0x48000c00
 80012e8:	48001000 	.word	0x48001000
 80012ec:	48001400 	.word	0x48001400
 80012f0:	48001800 	.word	0x48001800
 80012f4:	40010400 	.word	0x40010400

080012f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	887b      	ldrh	r3, [r7, #2]
 800130a:	4013      	ands	r3, r2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d002      	beq.n	8001316 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001310:	2301      	movs	r3, #1
 8001312:	73fb      	strb	r3, [r7, #15]
 8001314:	e001      	b.n	800131a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800131a:	7bfb      	ldrb	r3, [r7, #15]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	807b      	strh	r3, [r7, #2]
 8001334:	4613      	mov	r3, r2
 8001336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001338:	787b      	ldrb	r3, [r7, #1]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800133e:	887a      	ldrh	r2, [r7, #2]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001344:	e002      	b.n	800134c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001346:	887a      	ldrh	r2, [r7, #2]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <HAL_PWREx_GetVoltageRange+0x18>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40007000 	.word	0x40007000

08001374 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001382:	d130      	bne.n	80013e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001384:	4b23      	ldr	r3, [pc, #140]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800138c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001390:	d038      	beq.n	8001404 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800139a:	4a1e      	ldr	r2, [pc, #120]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2232      	movs	r2, #50	; 0x32
 80013a8:	fb02 f303 	mul.w	r3, r2, r3
 80013ac:	4a1b      	ldr	r2, [pc, #108]	; (800141c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013ae:	fba2 2303 	umull	r2, r3, r2, r3
 80013b2:	0c9b      	lsrs	r3, r3, #18
 80013b4:	3301      	adds	r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013b8:	e002      	b.n	80013c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	3b01      	subs	r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013cc:	d102      	bne.n	80013d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f2      	bne.n	80013ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e0:	d110      	bne.n	8001404 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e00f      	b.n	8001406 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013f2:	d007      	beq.n	8001404 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013fc:	4a05      	ldr	r2, [pc, #20]	; (8001414 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001402:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	40007000 	.word	0x40007000
 8001418:	20000000 	.word	0x20000000
 800141c:	431bde83 	.word	0x431bde83

08001420 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e3ca      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001432:	4b97      	ldr	r3, [pc, #604]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800143c:	4b94      	ldr	r3, [pc, #592]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	2b00      	cmp	r3, #0
 8001450:	f000 80e4 	beq.w	800161c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d007      	beq.n	800146a <HAL_RCC_OscConfig+0x4a>
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	2b0c      	cmp	r3, #12
 800145e:	f040 808b 	bne.w	8001578 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	2b01      	cmp	r3, #1
 8001466:	f040 8087 	bne.w	8001578 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800146a:	4b89      	ldr	r3, [pc, #548]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d005      	beq.n	8001482 <HAL_RCC_OscConfig+0x62>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e3a2      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1a      	ldr	r2, [r3, #32]
 8001486:	4b82      	ldr	r3, [pc, #520]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d004      	beq.n	800149c <HAL_RCC_OscConfig+0x7c>
 8001492:	4b7f      	ldr	r3, [pc, #508]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800149a:	e005      	b.n	80014a8 <HAL_RCC_OscConfig+0x88>
 800149c:	4b7c      	ldr	r3, [pc, #496]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 800149e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014a2:	091b      	lsrs	r3, r3, #4
 80014a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d223      	bcs.n	80014f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 fd1d 	bl	8001ef0 <RCC_SetFlashLatencyFromMSIRange>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e383      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014c0:	4b73      	ldr	r3, [pc, #460]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a72      	ldr	r2, [pc, #456]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80014c6:	f043 0308 	orr.w	r3, r3, #8
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b70      	ldr	r3, [pc, #448]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	496d      	ldr	r1, [pc, #436]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014de:	4b6c      	ldr	r3, [pc, #432]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	021b      	lsls	r3, r3, #8
 80014ec:	4968      	ldr	r1, [pc, #416]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	604b      	str	r3, [r1, #4]
 80014f2:	e025      	b.n	8001540 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014f4:	4b66      	ldr	r3, [pc, #408]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a65      	ldr	r2, [pc, #404]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80014fa:	f043 0308 	orr.w	r3, r3, #8
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b63      	ldr	r3, [pc, #396]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	4960      	ldr	r1, [pc, #384]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 800150e:	4313      	orrs	r3, r2
 8001510:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001512:	4b5f      	ldr	r3, [pc, #380]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	021b      	lsls	r3, r3, #8
 8001520:	495b      	ldr	r1, [pc, #364]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001522:	4313      	orrs	r3, r2
 8001524:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d109      	bne.n	8001540 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	4618      	mov	r0, r3
 8001532:	f000 fcdd 	bl	8001ef0 <RCC_SetFlashLatencyFromMSIRange>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e343      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001540:	f000 fc4a 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8001544:	4602      	mov	r2, r0
 8001546:	4b52      	ldr	r3, [pc, #328]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	091b      	lsrs	r3, r3, #4
 800154c:	f003 030f 	and.w	r3, r3, #15
 8001550:	4950      	ldr	r1, [pc, #320]	; (8001694 <HAL_RCC_OscConfig+0x274>)
 8001552:	5ccb      	ldrb	r3, [r1, r3]
 8001554:	f003 031f 	and.w	r3, r3, #31
 8001558:	fa22 f303 	lsr.w	r3, r2, r3
 800155c:	4a4e      	ldr	r2, [pc, #312]	; (8001698 <HAL_RCC_OscConfig+0x278>)
 800155e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001560:	4b4e      	ldr	r3, [pc, #312]	; (800169c <HAL_RCC_OscConfig+0x27c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fbdb 	bl	8000d20 <HAL_InitTick>
 800156a:	4603      	mov	r3, r0
 800156c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d052      	beq.n	800161a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	e327      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d032      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001580:	4b43      	ldr	r3, [pc, #268]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a42      	ldr	r2, [pc, #264]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800158c:	f7ff fc18 	bl	8000dc0 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001594:	f7ff fc14 	bl	8000dc0 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e310      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015a6:	4b3a      	ldr	r3, [pc, #232]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015b2:	4b37      	ldr	r3, [pc, #220]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a36      	ldr	r2, [pc, #216]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80015b8:	f043 0308 	orr.w	r3, r3, #8
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	4b34      	ldr	r3, [pc, #208]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	4931      	ldr	r1, [pc, #196]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015d0:	4b2f      	ldr	r3, [pc, #188]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69db      	ldr	r3, [r3, #28]
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	492c      	ldr	r1, [pc, #176]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	604b      	str	r3, [r1, #4]
 80015e4:	e01a      	b.n	800161c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015e6:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a29      	ldr	r2, [pc, #164]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 80015ec:	f023 0301 	bic.w	r3, r3, #1
 80015f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015f2:	f7ff fbe5 	bl	8000dc0 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015fa:	f7ff fbe1 	bl	8000dc0 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e2dd      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800160c:	4b20      	ldr	r3, [pc, #128]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f0      	bne.n	80015fa <HAL_RCC_OscConfig+0x1da>
 8001618:	e000      	b.n	800161c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800161a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0301 	and.w	r3, r3, #1
 8001624:	2b00      	cmp	r3, #0
 8001626:	d074      	beq.n	8001712 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	2b08      	cmp	r3, #8
 800162c:	d005      	beq.n	800163a <HAL_RCC_OscConfig+0x21a>
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	2b0c      	cmp	r3, #12
 8001632:	d10e      	bne.n	8001652 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	2b03      	cmp	r3, #3
 8001638:	d10b      	bne.n	8001652 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d064      	beq.n	8001710 <HAL_RCC_OscConfig+0x2f0>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d160      	bne.n	8001710 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e2ba      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800165a:	d106      	bne.n	800166a <HAL_RCC_OscConfig+0x24a>
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	e026      	b.n	80016b8 <HAL_RCC_OscConfig+0x298>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001672:	d115      	bne.n	80016a0 <HAL_RCC_OscConfig+0x280>
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a05      	ldr	r2, [pc, #20]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 800167a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a02      	ldr	r2, [pc, #8]	; (8001690 <HAL_RCC_OscConfig+0x270>)
 8001686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	e014      	b.n	80016b8 <HAL_RCC_OscConfig+0x298>
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000
 8001694:	08003970 	.word	0x08003970
 8001698:	20000000 	.word	0x20000000
 800169c:	20000004 	.word	0x20000004
 80016a0:	4ba0      	ldr	r3, [pc, #640]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a9f      	ldr	r2, [pc, #636]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80016a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b9d      	ldr	r3, [pc, #628]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a9c      	ldr	r2, [pc, #624]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80016b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d013      	beq.n	80016e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c0:	f7ff fb7e 	bl	8000dc0 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c8:	f7ff fb7a 	bl	8000dc0 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b64      	cmp	r3, #100	; 0x64
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e276      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016da:	4b92      	ldr	r3, [pc, #584]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x2a8>
 80016e6:	e014      	b.n	8001712 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e8:	f7ff fb6a 	bl	8000dc0 <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff fb66 	bl	8000dc0 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b64      	cmp	r3, #100	; 0x64
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e262      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001702:	4b88      	ldr	r3, [pc, #544]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f0      	bne.n	80016f0 <HAL_RCC_OscConfig+0x2d0>
 800170e:	e000      	b.n	8001712 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d060      	beq.n	80017e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	2b04      	cmp	r3, #4
 8001722:	d005      	beq.n	8001730 <HAL_RCC_OscConfig+0x310>
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	2b0c      	cmp	r3, #12
 8001728:	d119      	bne.n	800175e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d116      	bne.n	800175e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001730:	4b7c      	ldr	r3, [pc, #496]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_RCC_OscConfig+0x328>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e23f      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001748:	4b76      	ldr	r3, [pc, #472]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	061b      	lsls	r3, r3, #24
 8001756:	4973      	ldr	r1, [pc, #460]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800175c:	e040      	b.n	80017e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d023      	beq.n	80017ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001766:	4b6f      	ldr	r3, [pc, #444]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a6e      	ldr	r2, [pc, #440]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 800176c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001772:	f7ff fb25 	bl	8000dc0 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800177a:	f7ff fb21 	bl	8000dc0 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e21d      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800178c:	4b65      	ldr	r3, [pc, #404]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f0      	beq.n	800177a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001798:	4b62      	ldr	r3, [pc, #392]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	061b      	lsls	r3, r3, #24
 80017a6:	495f      	ldr	r1, [pc, #380]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	604b      	str	r3, [r1, #4]
 80017ac:	e018      	b.n	80017e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ae:	4b5d      	ldr	r3, [pc, #372]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a5c      	ldr	r2, [pc, #368]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80017b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ba:	f7ff fb01 	bl	8000dc0 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c2:	f7ff fafd 	bl	8000dc0 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e1f9      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017d4:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1f0      	bne.n	80017c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d03c      	beq.n	8001866 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d01c      	beq.n	800182e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f4:	4b4b      	ldr	r3, [pc, #300]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80017f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017fa:	4a4a      	ldr	r2, [pc, #296]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001804:	f7ff fadc 	bl	8000dc0 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800180c:	f7ff fad8 	bl	8000dc0 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e1d4      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800181e:	4b41      	ldr	r3, [pc, #260]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0ef      	beq.n	800180c <HAL_RCC_OscConfig+0x3ec>
 800182c:	e01b      	b.n	8001866 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800182e:	4b3d      	ldr	r3, [pc, #244]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001830:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001834:	4a3b      	ldr	r2, [pc, #236]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001836:	f023 0301 	bic.w	r3, r3, #1
 800183a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800183e:	f7ff fabf 	bl	8000dc0 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001846:	f7ff fabb 	bl	8000dc0 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e1b7      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001858:	4b32      	ldr	r3, [pc, #200]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 800185a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1ef      	bne.n	8001846 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 80a6 	beq.w	80019c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001878:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 800187a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10d      	bne.n	80018a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001884:	4b27      	ldr	r3, [pc, #156]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001888:	4a26      	ldr	r2, [pc, #152]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 800188a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188e:	6593      	str	r3, [r2, #88]	; 0x58
 8001890:	4b24      	ldr	r3, [pc, #144]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800189c:	2301      	movs	r3, #1
 800189e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a0:	4b21      	ldr	r3, [pc, #132]	; (8001928 <HAL_RCC_OscConfig+0x508>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d118      	bne.n	80018de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018ac:	4b1e      	ldr	r3, [pc, #120]	; (8001928 <HAL_RCC_OscConfig+0x508>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a1d      	ldr	r2, [pc, #116]	; (8001928 <HAL_RCC_OscConfig+0x508>)
 80018b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b8:	f7ff fa82 	bl	8000dc0 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c0:	f7ff fa7e 	bl	8000dc0 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e17a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_RCC_OscConfig+0x508>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d0f0      	beq.n	80018c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d108      	bne.n	80018f8 <HAL_RCC_OscConfig+0x4d8>
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80018e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ec:	4a0d      	ldr	r2, [pc, #52]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018f6:	e029      	b.n	800194c <HAL_RCC_OscConfig+0x52c>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b05      	cmp	r3, #5
 80018fe:	d115      	bne.n	800192c <HAL_RCC_OscConfig+0x50c>
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001906:	4a07      	ldr	r2, [pc, #28]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001916:	4a03      	ldr	r2, [pc, #12]	; (8001924 <HAL_RCC_OscConfig+0x504>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001920:	e014      	b.n	800194c <HAL_RCC_OscConfig+0x52c>
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000
 8001928:	40007000 	.word	0x40007000
 800192c:	4b9c      	ldr	r3, [pc, #624]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 800192e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001932:	4a9b      	ldr	r2, [pc, #620]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001934:	f023 0301 	bic.w	r3, r3, #1
 8001938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800193c:	4b98      	ldr	r3, [pc, #608]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 800193e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001942:	4a97      	ldr	r2, [pc, #604]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001944:	f023 0304 	bic.w	r3, r3, #4
 8001948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d016      	beq.n	8001982 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001954:	f7ff fa34 	bl	8000dc0 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800195a:	e00a      	b.n	8001972 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195c:	f7ff fa30 	bl	8000dc0 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f241 3288 	movw	r2, #5000	; 0x1388
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e12a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001972:	4b8b      	ldr	r3, [pc, #556]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0ed      	beq.n	800195c <HAL_RCC_OscConfig+0x53c>
 8001980:	e015      	b.n	80019ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001982:	f7ff fa1d 	bl	8000dc0 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001988:	e00a      	b.n	80019a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198a:	f7ff fa19 	bl	8000dc0 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	f241 3288 	movw	r2, #5000	; 0x1388
 8001998:	4293      	cmp	r3, r2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e113      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019a0:	4b7f      	ldr	r3, [pc, #508]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 80019a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1ed      	bne.n	800198a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019ae:	7ffb      	ldrb	r3, [r7, #31]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d105      	bne.n	80019c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b4:	4b7a      	ldr	r3, [pc, #488]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 80019b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b8:	4a79      	ldr	r2, [pc, #484]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 80019ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019be:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 80fe 	beq.w	8001bc6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	f040 80d0 	bne.w	8001b74 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019d4:	4b72      	ldr	r3, [pc, #456]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f003 0203 	and.w	r2, r3, #3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d130      	bne.n	8001a4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	3b01      	subs	r3, #1
 80019f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d127      	bne.n	8001a4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a04:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d11f      	bne.n	8001a4a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a14:	2a07      	cmp	r2, #7
 8001a16:	bf14      	ite	ne
 8001a18:	2201      	movne	r2, #1
 8001a1a:	2200      	moveq	r2, #0
 8001a1c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d113      	bne.n	8001a4a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2c:	085b      	lsrs	r3, r3, #1
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d109      	bne.n	8001a4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	085b      	lsrs	r3, r3, #1
 8001a42:	3b01      	subs	r3, #1
 8001a44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d06e      	beq.n	8001b28 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	2b0c      	cmp	r3, #12
 8001a4e:	d069      	beq.n	8001b24 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a50:	4b53      	ldr	r3, [pc, #332]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d105      	bne.n	8001a68 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a5c:	4b50      	ldr	r3, [pc, #320]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e0ad      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a6c:	4b4c      	ldr	r3, [pc, #304]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a4b      	ldr	r2, [pc, #300]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001a72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a76:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a78:	f7ff f9a2 	bl	8000dc0 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a80:	f7ff f99e 	bl	8000dc0 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e09a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a92:	4b43      	ldr	r3, [pc, #268]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a9e:	4b40      	ldr	r3, [pc, #256]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001aa0:	68da      	ldr	r2, [r3, #12]
 8001aa2:	4b40      	ldr	r3, [pc, #256]	; (8001ba4 <HAL_RCC_OscConfig+0x784>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001aae:	3a01      	subs	r2, #1
 8001ab0:	0112      	lsls	r2, r2, #4
 8001ab2:	4311      	orrs	r1, r2
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ab8:	0212      	lsls	r2, r2, #8
 8001aba:	4311      	orrs	r1, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ac0:	0852      	lsrs	r2, r2, #1
 8001ac2:	3a01      	subs	r2, #1
 8001ac4:	0552      	lsls	r2, r2, #21
 8001ac6:	4311      	orrs	r1, r2
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001acc:	0852      	lsrs	r2, r2, #1
 8001ace:	3a01      	subs	r2, #1
 8001ad0:	0652      	lsls	r2, r2, #25
 8001ad2:	4311      	orrs	r1, r2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ad8:	0912      	lsrs	r2, r2, #4
 8001ada:	0452      	lsls	r2, r2, #17
 8001adc:	430a      	orrs	r2, r1
 8001ade:	4930      	ldr	r1, [pc, #192]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ae4:	4b2e      	ldr	r3, [pc, #184]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a2d      	ldr	r2, [pc, #180]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001aea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001af0:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	4a2a      	ldr	r2, [pc, #168]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001af6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001afa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001afc:	f7ff f960 	bl	8000dc0 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b04:	f7ff f95c 	bl	8000dc0 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e058      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b16:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b22:	e050      	b.n	8001bc6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e04f      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b28:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d148      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a19      	ldr	r2, [pc, #100]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b40:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	4a16      	ldr	r2, [pc, #88]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b4c:	f7ff f938 	bl	8000dc0 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b54:	f7ff f934 	bl	8000dc0 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e030      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0x734>
 8001b72:	e028      	b.n	8001bc6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	2b0c      	cmp	r3, #12
 8001b78:	d023      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a08      	ldr	r2, [pc, #32]	; (8001ba0 <HAL_RCC_OscConfig+0x780>)
 8001b80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b86:	f7ff f91b 	bl	8000dc0 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b8c:	e00c      	b.n	8001ba8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b8e:	f7ff f917 	bl	8000dc0 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d905      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e013      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_RCC_OscConfig+0x7b0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1ec      	bne.n	8001b8e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_RCC_OscConfig+0x7b0>)
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	4905      	ldr	r1, [pc, #20]	; (8001bd0 <HAL_RCC_OscConfig+0x7b0>)
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_RCC_OscConfig+0x7b4>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60cb      	str	r3, [r1, #12]
 8001bc0:	e001      	b.n	8001bc6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3720      	adds	r7, #32
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	feeefffc 	.word	0xfeeefffc

08001bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0e7      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bec:	4b75      	ldr	r3, [pc, #468]	; (8001dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d910      	bls.n	8001c1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfa:	4b72      	ldr	r3, [pc, #456]	; (8001dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 0207 	bic.w	r2, r3, #7
 8001c02:	4970      	ldr	r1, [pc, #448]	; (8001dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0a:	4b6e      	ldr	r3, [pc, #440]	; (8001dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d001      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0cf      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d010      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	4b66      	ldr	r3, [pc, #408]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d908      	bls.n	8001c4a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c38:	4b63      	ldr	r3, [pc, #396]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	4960      	ldr	r1, [pc, #384]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d04c      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c5e:	4b5a      	ldr	r3, [pc, #360]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d121      	bne.n	8001cae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e0a6      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d107      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c76:	4b54      	ldr	r3, [pc, #336]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d115      	bne.n	8001cae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e09a      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d107      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c8e:	4b4e      	ldr	r3, [pc, #312]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d109      	bne.n	8001cae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e08e      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c9e:	4b4a      	ldr	r3, [pc, #296]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e086      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cae:	4b46      	ldr	r3, [pc, #280]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f023 0203 	bic.w	r2, r3, #3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	4943      	ldr	r1, [pc, #268]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cc0:	f7ff f87e 	bl	8000dc0 <HAL_GetTick>
 8001cc4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc6:	e00a      	b.n	8001cde <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc8:	f7ff f87a 	bl	8000dc0 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e06e      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cde:	4b3a      	ldr	r3, [pc, #232]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 020c 	and.w	r2, r3, #12
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d1eb      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d010      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	4b31      	ldr	r3, [pc, #196]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d208      	bcs.n	8001d1e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d0c:	4b2e      	ldr	r3, [pc, #184]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	492b      	ldr	r1, [pc, #172]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1e:	4b29      	ldr	r3, [pc, #164]	; (8001dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d210      	bcs.n	8001d4e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2c:	4b25      	ldr	r3, [pc, #148]	; (8001dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f023 0207 	bic.w	r2, r3, #7
 8001d34:	4923      	ldr	r1, [pc, #140]	; (8001dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3c:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <HAL_RCC_ClockConfig+0x1ec>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d001      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e036      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d008      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	4918      	ldr	r1, [pc, #96]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0308 	and.w	r3, r3, #8
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d009      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d78:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4910      	ldr	r1, [pc, #64]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d8c:	f000 f824 	bl	8001dd8 <HAL_RCC_GetSysClockFreq>
 8001d90:	4602      	mov	r2, r0
 8001d92:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	091b      	lsrs	r3, r3, #4
 8001d98:	f003 030f 	and.w	r3, r3, #15
 8001d9c:	490b      	ldr	r1, [pc, #44]	; (8001dcc <HAL_RCC_ClockConfig+0x1f4>)
 8001d9e:	5ccb      	ldrb	r3, [r1, r3]
 8001da0:	f003 031f 	and.w	r3, r3, #31
 8001da4:	fa22 f303 	lsr.w	r3, r2, r3
 8001da8:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <HAL_RCC_ClockConfig+0x1f8>)
 8001daa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_RCC_ClockConfig+0x1fc>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe ffb5 	bl	8000d20 <HAL_InitTick>
 8001db6:	4603      	mov	r3, r0
 8001db8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dba:	7afb      	ldrb	r3, [r7, #11]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40022000 	.word	0x40022000
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	08003970 	.word	0x08003970
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	20000004 	.word	0x20000004

08001dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	; 0x24
 8001ddc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	2300      	movs	r3, #0
 8001de4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001de6:	4b3e      	ldr	r3, [pc, #248]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001df0:	4b3b      	ldr	r3, [pc, #236]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0x34>
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	2b0c      	cmp	r3, #12
 8001e04:	d121      	bne.n	8001e4a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d11e      	bne.n	8001e4a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e0c:	4b34      	ldr	r3, [pc, #208]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d107      	bne.n	8001e28 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e18:	4b31      	ldr	r3, [pc, #196]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e1e:	0a1b      	lsrs	r3, r3, #8
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	e005      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e28:	4b2d      	ldr	r3, [pc, #180]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	091b      	lsrs	r3, r3, #4
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e34:	4a2b      	ldr	r2, [pc, #172]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10d      	bne.n	8001e60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e48:	e00a      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d102      	bne.n	8001e56 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e50:	4b25      	ldr	r3, [pc, #148]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e52:	61bb      	str	r3, [r7, #24]
 8001e54:	e004      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e5c:	4b23      	ldr	r3, [pc, #140]	; (8001eec <HAL_RCC_GetSysClockFreq+0x114>)
 8001e5e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	2b0c      	cmp	r3, #12
 8001e64:	d134      	bne.n	8001ed0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e66:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d003      	beq.n	8001e7e <HAL_RCC_GetSysClockFreq+0xa6>
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d003      	beq.n	8001e84 <HAL_RCC_GetSysClockFreq+0xac>
 8001e7c:	e005      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e80:	617b      	str	r3, [r7, #20]
      break;
 8001e82:	e005      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e84:	4b19      	ldr	r3, [pc, #100]	; (8001eec <HAL_RCC_GetSysClockFreq+0x114>)
 8001e86:	617b      	str	r3, [r7, #20]
      break;
 8001e88:	e002      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	617b      	str	r3, [r7, #20]
      break;
 8001e8e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e90:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	091b      	lsrs	r3, r3, #4
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e9e:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	fb03 f202 	mul.w	r2, r3, r2
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	0e5b      	lsrs	r3, r3, #25
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ece:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ed0:	69bb      	ldr	r3, [r7, #24]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3724      	adds	r7, #36	; 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	08003980 	.word	0x08003980
 8001ee8:	00f42400 	.word	0x00f42400
 8001eec:	007a1200 	.word	0x007a1200

08001ef0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ef8:	2300      	movs	r3, #0
 8001efa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001efc:	4b2a      	ldr	r3, [pc, #168]	; (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f08:	f7ff fa26 	bl	8001358 <HAL_PWREx_GetVoltageRange>
 8001f0c:	6178      	str	r0, [r7, #20]
 8001f0e:	e014      	b.n	8001f3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f10:	4b25      	ldr	r3, [pc, #148]	; (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	4a24      	ldr	r2, [pc, #144]	; (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f1c:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f28:	f7ff fa16 	bl	8001358 <HAL_PWREx_GetVoltageRange>
 8001f2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f32:	4a1d      	ldr	r2, [pc, #116]	; (8001fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f38:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f40:	d10b      	bne.n	8001f5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b80      	cmp	r3, #128	; 0x80
 8001f46:	d919      	bls.n	8001f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2ba0      	cmp	r3, #160	; 0xa0
 8001f4c:	d902      	bls.n	8001f54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f4e:	2302      	movs	r3, #2
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	e013      	b.n	8001f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f54:	2301      	movs	r3, #1
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	e010      	b.n	8001f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b80      	cmp	r3, #128	; 0x80
 8001f5e:	d902      	bls.n	8001f66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f60:	2303      	movs	r3, #3
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	e00a      	b.n	8001f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2b80      	cmp	r3, #128	; 0x80
 8001f6a:	d102      	bne.n	8001f72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	e004      	b.n	8001f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b70      	cmp	r3, #112	; 0x70
 8001f76:	d101      	bne.n	8001f7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f78:	2301      	movs	r3, #1
 8001f7a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f023 0207 	bic.w	r2, r3, #7
 8001f84:	4909      	ldr	r1, [pc, #36]	; (8001fac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f8c:	4b07      	ldr	r3, [pc, #28]	; (8001fac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d001      	beq.n	8001f9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3718      	adds	r7, #24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40022000 	.word	0x40022000

08001fb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e095      	b.n	80020ee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d108      	bne.n	8001fdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fd2:	d009      	beq.n	8001fe8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
 8001fda:	e005      	b.n	8001fe8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d106      	bne.n	8002008 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7fe fd94 	bl	8000b30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2202      	movs	r2, #2
 800200c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800201e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002028:	d902      	bls.n	8002030 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	e002      	b.n	8002036 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002030:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002034:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800203e:	d007      	beq.n	8002050 <HAL_SPI_Init+0xa0>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002048:	d002      	beq.n	8002050 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002092:	ea42 0103 	orr.w	r1, r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	0c1b      	lsrs	r3, r3, #16
 80020ac:	f003 0204 	and.w	r2, r3, #4
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	f003 0310 	and.w	r3, r3, #16
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80020cc:	ea42 0103 	orr.w	r1, r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	430a      	orrs	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b088      	sub	sp, #32
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	60f8      	str	r0, [r7, #12]
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	603b      	str	r3, [r7, #0]
 8002102:	4613      	mov	r3, r2
 8002104:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_SPI_Transmit+0x22>
 8002114:	2302      	movs	r3, #2
 8002116:	e15f      	b.n	80023d8 <HAL_SPI_Transmit+0x2e2>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002120:	f7fe fe4e 	bl	8000dc0 <HAL_GetTick>
 8002124:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b01      	cmp	r3, #1
 8002134:	d002      	beq.n	800213c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002136:	2302      	movs	r3, #2
 8002138:	77fb      	strb	r3, [r7, #31]
    goto error;
 800213a:	e148      	b.n	80023ce <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d002      	beq.n	8002148 <HAL_SPI_Transmit+0x52>
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d102      	bne.n	800214e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800214c:	e13f      	b.n	80023ce <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2203      	movs	r2, #3
 8002152:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	88fa      	ldrh	r2, [r7, #6]
 8002166:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	88fa      	ldrh	r2, [r7, #6]
 800216c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002198:	d10f      	bne.n	80021ba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c4:	2b40      	cmp	r3, #64	; 0x40
 80021c6:	d007      	beq.n	80021d8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80021e0:	d94f      	bls.n	8002282 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <HAL_SPI_Transmit+0xfa>
 80021ea:	8afb      	ldrh	r3, [r7, #22]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d142      	bne.n	8002276 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f4:	881a      	ldrh	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002200:	1c9a      	adds	r2, r3, #2
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800220a:	b29b      	uxth	r3, r3
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002214:	e02f      	b.n	8002276 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b02      	cmp	r3, #2
 8002222:	d112      	bne.n	800224a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002228:	881a      	ldrh	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002234:	1c9a      	adds	r2, r3, #2
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800223e:	b29b      	uxth	r3, r3
 8002240:	3b01      	subs	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002248:	e015      	b.n	8002276 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800224a:	f7fe fdb9 	bl	8000dc0 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d803      	bhi.n	8002262 <HAL_SPI_Transmit+0x16c>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002260:	d102      	bne.n	8002268 <HAL_SPI_Transmit+0x172>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d106      	bne.n	8002276 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002274:	e0ab      	b.n	80023ce <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800227a:	b29b      	uxth	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1ca      	bne.n	8002216 <HAL_SPI_Transmit+0x120>
 8002280:	e080      	b.n	8002384 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <HAL_SPI_Transmit+0x19a>
 800228a:	8afb      	ldrh	r3, [r7, #22]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d174      	bne.n	800237a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002294:	b29b      	uxth	r3, r3
 8002296:	2b01      	cmp	r3, #1
 8002298:	d912      	bls.n	80022c0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229e:	881a      	ldrh	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022aa:	1c9a      	adds	r2, r3, #2
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3b02      	subs	r3, #2
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022be:	e05c      	b.n	800237a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	330c      	adds	r3, #12
 80022ca:	7812      	ldrb	r2, [r2, #0]
 80022cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022dc:	b29b      	uxth	r3, r3
 80022de:	3b01      	subs	r3, #1
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80022e6:	e048      	b.n	800237a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d12b      	bne.n	800234e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d912      	bls.n	8002326 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002304:	881a      	ldrh	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002310:	1c9a      	adds	r2, r3, #2
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800231a:	b29b      	uxth	r3, r3
 800231c:	3b02      	subs	r3, #2
 800231e:	b29a      	uxth	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002324:	e029      	b.n	800237a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	330c      	adds	r3, #12
 8002330:	7812      	ldrb	r2, [r2, #0]
 8002332:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002342:	b29b      	uxth	r3, r3
 8002344:	3b01      	subs	r3, #1
 8002346:	b29a      	uxth	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800234c:	e015      	b.n	800237a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800234e:	f7fe fd37 	bl	8000dc0 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d803      	bhi.n	8002366 <HAL_SPI_Transmit+0x270>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002364:	d102      	bne.n	800236c <HAL_SPI_Transmit+0x276>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d106      	bne.n	800237a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002378:	e029      	b.n	80023ce <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800237e:	b29b      	uxth	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1b1      	bne.n	80022e8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	6839      	ldr	r1, [r7, #0]
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 f947 	bl	800261c <SPI_EndRxTxTransaction>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2220      	movs	r2, #32
 8002398:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10a      	bne.n	80023b8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023a2:	2300      	movs	r3, #0
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	77fb      	strb	r3, [r7, #31]
 80023c4:	e003      	b.n	80023ce <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80023d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3720      	adds	r7, #32
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	4613      	mov	r3, r2
 80023ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80023f0:	f7fe fce6 	bl	8000dc0 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	4413      	add	r3, r2
 80023fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002400:	f7fe fcde 	bl	8000dc0 <HAL_GetTick>
 8002404:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002406:	4b39      	ldr	r3, [pc, #228]	; (80024ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	015b      	lsls	r3, r3, #5
 800240c:	0d1b      	lsrs	r3, r3, #20
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	fb02 f303 	mul.w	r3, r2, r3
 8002414:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002416:	e054      	b.n	80024c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241e:	d050      	beq.n	80024c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002420:	f7fe fcce 	bl	8000dc0 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	429a      	cmp	r2, r3
 800242e:	d902      	bls.n	8002436 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d13d      	bne.n	80024b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002444:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800244e:	d111      	bne.n	8002474 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002458:	d004      	beq.n	8002464 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002462:	d107      	bne.n	8002474 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002472:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800247c:	d10f      	bne.n	800249e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800249c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e017      	b.n	80024e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	3b01      	subs	r3, #1
 80024c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	4013      	ands	r3, r2
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	bf0c      	ite	eq
 80024d2:	2301      	moveq	r3, #1
 80024d4:	2300      	movne	r3, #0
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	461a      	mov	r2, r3
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d19b      	bne.n	8002418 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3720      	adds	r7, #32
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000000 	.word	0x20000000

080024f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	; 0x28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
 80024fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002502:	f7fe fc5d 	bl	8000dc0 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250a:	1a9b      	subs	r3, r3, r2
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	4413      	add	r3, r2
 8002510:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002512:	f7fe fc55 	bl	8000dc0 <HAL_GetTick>
 8002516:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	330c      	adds	r3, #12
 800251e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002520:	4b3d      	ldr	r3, [pc, #244]	; (8002618 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4613      	mov	r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	4413      	add	r3, r2
 800252a:	00da      	lsls	r2, r3, #3
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	0d1b      	lsrs	r3, r3, #20
 8002530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002532:	fb02 f303 	mul.w	r3, r2, r3
 8002536:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002538:	e060      	b.n	80025fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002540:	d107      	bne.n	8002552 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d104      	bne.n	8002552 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002550:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002558:	d050      	beq.n	80025fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800255a:	f7fe fc31 	bl	8000dc0 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002566:	429a      	cmp	r2, r3
 8002568:	d902      	bls.n	8002570 <SPI_WaitFifoStateUntilTimeout+0x80>
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	2b00      	cmp	r3, #0
 800256e:	d13d      	bne.n	80025ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800257e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002588:	d111      	bne.n	80025ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002592:	d004      	beq.n	800259e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259c:	d107      	bne.n	80025ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025b6:	d10f      	bne.n	80025d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e010      	b.n	800260e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	4013      	ands	r3, r2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	429a      	cmp	r2, r3
 800260a:	d196      	bne.n	800253a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3728      	adds	r7, #40	; 0x28
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000000 	.word	0x20000000

0800261c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af02      	add	r7, sp, #8
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2200      	movs	r2, #0
 8002630:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f7ff ff5b 	bl	80024f0 <SPI_WaitFifoStateUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d007      	beq.n	8002650 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002644:	f043 0220 	orr.w	r2, r3, #32
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e027      	b.n	80026a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2200      	movs	r2, #0
 8002658:	2180      	movs	r1, #128	; 0x80
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f7ff fec0 	bl	80023e0 <SPI_WaitFlagStateUntilTimeout>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d007      	beq.n	8002676 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266a:	f043 0220 	orr.w	r2, r3, #32
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e014      	b.n	80026a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2200      	movs	r2, #0
 800267e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f7ff ff34 	bl	80024f0 <SPI_WaitFifoStateUntilTimeout>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d007      	beq.n	800269e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002692:	f043 0220 	orr.w	r2, r3, #32
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e000      	b.n	80026a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <malloc>:
 80026a8:	4b02      	ldr	r3, [pc, #8]	; (80026b4 <malloc+0xc>)
 80026aa:	4601      	mov	r1, r0
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	f000 b82b 	b.w	8002708 <_malloc_r>
 80026b2:	bf00      	nop
 80026b4:	20000058 	.word	0x20000058

080026b8 <free>:
 80026b8:	4b02      	ldr	r3, [pc, #8]	; (80026c4 <free+0xc>)
 80026ba:	4601      	mov	r1, r0
 80026bc:	6818      	ldr	r0, [r3, #0]
 80026be:	f000 b8fb 	b.w	80028b8 <_free_r>
 80026c2:	bf00      	nop
 80026c4:	20000058 	.word	0x20000058

080026c8 <sbrk_aligned>:
 80026c8:	b570      	push	{r4, r5, r6, lr}
 80026ca:	4e0e      	ldr	r6, [pc, #56]	; (8002704 <sbrk_aligned+0x3c>)
 80026cc:	460c      	mov	r4, r1
 80026ce:	6831      	ldr	r1, [r6, #0]
 80026d0:	4605      	mov	r5, r0
 80026d2:	b911      	cbnz	r1, 80026da <sbrk_aligned+0x12>
 80026d4:	f000 f8ac 	bl	8002830 <_sbrk_r>
 80026d8:	6030      	str	r0, [r6, #0]
 80026da:	4621      	mov	r1, r4
 80026dc:	4628      	mov	r0, r5
 80026de:	f000 f8a7 	bl	8002830 <_sbrk_r>
 80026e2:	1c43      	adds	r3, r0, #1
 80026e4:	d00a      	beq.n	80026fc <sbrk_aligned+0x34>
 80026e6:	1cc4      	adds	r4, r0, #3
 80026e8:	f024 0403 	bic.w	r4, r4, #3
 80026ec:	42a0      	cmp	r0, r4
 80026ee:	d007      	beq.n	8002700 <sbrk_aligned+0x38>
 80026f0:	1a21      	subs	r1, r4, r0
 80026f2:	4628      	mov	r0, r5
 80026f4:	f000 f89c 	bl	8002830 <_sbrk_r>
 80026f8:	3001      	adds	r0, #1
 80026fa:	d101      	bne.n	8002700 <sbrk_aligned+0x38>
 80026fc:	f04f 34ff 	mov.w	r4, #4294967295
 8002700:	4620      	mov	r0, r4
 8002702:	bd70      	pop	{r4, r5, r6, pc}
 8002704:	20000140 	.word	0x20000140

08002708 <_malloc_r>:
 8002708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800270c:	1ccd      	adds	r5, r1, #3
 800270e:	f025 0503 	bic.w	r5, r5, #3
 8002712:	3508      	adds	r5, #8
 8002714:	2d0c      	cmp	r5, #12
 8002716:	bf38      	it	cc
 8002718:	250c      	movcc	r5, #12
 800271a:	2d00      	cmp	r5, #0
 800271c:	4607      	mov	r7, r0
 800271e:	db01      	blt.n	8002724 <_malloc_r+0x1c>
 8002720:	42a9      	cmp	r1, r5
 8002722:	d905      	bls.n	8002730 <_malloc_r+0x28>
 8002724:	230c      	movs	r3, #12
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	2600      	movs	r6, #0
 800272a:	4630      	mov	r0, r6
 800272c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002730:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002804 <_malloc_r+0xfc>
 8002734:	f000 f868 	bl	8002808 <__malloc_lock>
 8002738:	f8d8 3000 	ldr.w	r3, [r8]
 800273c:	461c      	mov	r4, r3
 800273e:	bb5c      	cbnz	r4, 8002798 <_malloc_r+0x90>
 8002740:	4629      	mov	r1, r5
 8002742:	4638      	mov	r0, r7
 8002744:	f7ff ffc0 	bl	80026c8 <sbrk_aligned>
 8002748:	1c43      	adds	r3, r0, #1
 800274a:	4604      	mov	r4, r0
 800274c:	d155      	bne.n	80027fa <_malloc_r+0xf2>
 800274e:	f8d8 4000 	ldr.w	r4, [r8]
 8002752:	4626      	mov	r6, r4
 8002754:	2e00      	cmp	r6, #0
 8002756:	d145      	bne.n	80027e4 <_malloc_r+0xdc>
 8002758:	2c00      	cmp	r4, #0
 800275a:	d048      	beq.n	80027ee <_malloc_r+0xe6>
 800275c:	6823      	ldr	r3, [r4, #0]
 800275e:	4631      	mov	r1, r6
 8002760:	4638      	mov	r0, r7
 8002762:	eb04 0903 	add.w	r9, r4, r3
 8002766:	f000 f863 	bl	8002830 <_sbrk_r>
 800276a:	4581      	cmp	r9, r0
 800276c:	d13f      	bne.n	80027ee <_malloc_r+0xe6>
 800276e:	6821      	ldr	r1, [r4, #0]
 8002770:	1a6d      	subs	r5, r5, r1
 8002772:	4629      	mov	r1, r5
 8002774:	4638      	mov	r0, r7
 8002776:	f7ff ffa7 	bl	80026c8 <sbrk_aligned>
 800277a:	3001      	adds	r0, #1
 800277c:	d037      	beq.n	80027ee <_malloc_r+0xe6>
 800277e:	6823      	ldr	r3, [r4, #0]
 8002780:	442b      	add	r3, r5
 8002782:	6023      	str	r3, [r4, #0]
 8002784:	f8d8 3000 	ldr.w	r3, [r8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d038      	beq.n	80027fe <_malloc_r+0xf6>
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	42a2      	cmp	r2, r4
 8002790:	d12b      	bne.n	80027ea <_malloc_r+0xe2>
 8002792:	2200      	movs	r2, #0
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	e00f      	b.n	80027b8 <_malloc_r+0xb0>
 8002798:	6822      	ldr	r2, [r4, #0]
 800279a:	1b52      	subs	r2, r2, r5
 800279c:	d41f      	bmi.n	80027de <_malloc_r+0xd6>
 800279e:	2a0b      	cmp	r2, #11
 80027a0:	d917      	bls.n	80027d2 <_malloc_r+0xca>
 80027a2:	1961      	adds	r1, r4, r5
 80027a4:	42a3      	cmp	r3, r4
 80027a6:	6025      	str	r5, [r4, #0]
 80027a8:	bf18      	it	ne
 80027aa:	6059      	strne	r1, [r3, #4]
 80027ac:	6863      	ldr	r3, [r4, #4]
 80027ae:	bf08      	it	eq
 80027b0:	f8c8 1000 	streq.w	r1, [r8]
 80027b4:	5162      	str	r2, [r4, r5]
 80027b6:	604b      	str	r3, [r1, #4]
 80027b8:	4638      	mov	r0, r7
 80027ba:	f104 060b 	add.w	r6, r4, #11
 80027be:	f000 f829 	bl	8002814 <__malloc_unlock>
 80027c2:	f026 0607 	bic.w	r6, r6, #7
 80027c6:	1d23      	adds	r3, r4, #4
 80027c8:	1af2      	subs	r2, r6, r3
 80027ca:	d0ae      	beq.n	800272a <_malloc_r+0x22>
 80027cc:	1b9b      	subs	r3, r3, r6
 80027ce:	50a3      	str	r3, [r4, r2]
 80027d0:	e7ab      	b.n	800272a <_malloc_r+0x22>
 80027d2:	42a3      	cmp	r3, r4
 80027d4:	6862      	ldr	r2, [r4, #4]
 80027d6:	d1dd      	bne.n	8002794 <_malloc_r+0x8c>
 80027d8:	f8c8 2000 	str.w	r2, [r8]
 80027dc:	e7ec      	b.n	80027b8 <_malloc_r+0xb0>
 80027de:	4623      	mov	r3, r4
 80027e0:	6864      	ldr	r4, [r4, #4]
 80027e2:	e7ac      	b.n	800273e <_malloc_r+0x36>
 80027e4:	4634      	mov	r4, r6
 80027e6:	6876      	ldr	r6, [r6, #4]
 80027e8:	e7b4      	b.n	8002754 <_malloc_r+0x4c>
 80027ea:	4613      	mov	r3, r2
 80027ec:	e7cc      	b.n	8002788 <_malloc_r+0x80>
 80027ee:	230c      	movs	r3, #12
 80027f0:	603b      	str	r3, [r7, #0]
 80027f2:	4638      	mov	r0, r7
 80027f4:	f000 f80e 	bl	8002814 <__malloc_unlock>
 80027f8:	e797      	b.n	800272a <_malloc_r+0x22>
 80027fa:	6025      	str	r5, [r4, #0]
 80027fc:	e7dc      	b.n	80027b8 <_malloc_r+0xb0>
 80027fe:	605b      	str	r3, [r3, #4]
 8002800:	deff      	udf	#255	; 0xff
 8002802:	bf00      	nop
 8002804:	2000013c 	.word	0x2000013c

08002808 <__malloc_lock>:
 8002808:	4801      	ldr	r0, [pc, #4]	; (8002810 <__malloc_lock+0x8>)
 800280a:	f000 b84b 	b.w	80028a4 <__retarget_lock_acquire_recursive>
 800280e:	bf00      	nop
 8002810:	20000280 	.word	0x20000280

08002814 <__malloc_unlock>:
 8002814:	4801      	ldr	r0, [pc, #4]	; (800281c <__malloc_unlock+0x8>)
 8002816:	f000 b846 	b.w	80028a6 <__retarget_lock_release_recursive>
 800281a:	bf00      	nop
 800281c:	20000280 	.word	0x20000280

08002820 <memset>:
 8002820:	4402      	add	r2, r0
 8002822:	4603      	mov	r3, r0
 8002824:	4293      	cmp	r3, r2
 8002826:	d100      	bne.n	800282a <memset+0xa>
 8002828:	4770      	bx	lr
 800282a:	f803 1b01 	strb.w	r1, [r3], #1
 800282e:	e7f9      	b.n	8002824 <memset+0x4>

08002830 <_sbrk_r>:
 8002830:	b538      	push	{r3, r4, r5, lr}
 8002832:	4d06      	ldr	r5, [pc, #24]	; (800284c <_sbrk_r+0x1c>)
 8002834:	2300      	movs	r3, #0
 8002836:	4604      	mov	r4, r0
 8002838:	4608      	mov	r0, r1
 800283a:	602b      	str	r3, [r5, #0]
 800283c:	f7fe f9e6 	bl	8000c0c <_sbrk>
 8002840:	1c43      	adds	r3, r0, #1
 8002842:	d102      	bne.n	800284a <_sbrk_r+0x1a>
 8002844:	682b      	ldr	r3, [r5, #0]
 8002846:	b103      	cbz	r3, 800284a <_sbrk_r+0x1a>
 8002848:	6023      	str	r3, [r4, #0]
 800284a:	bd38      	pop	{r3, r4, r5, pc}
 800284c:	2000027c 	.word	0x2000027c

08002850 <__errno>:
 8002850:	4b01      	ldr	r3, [pc, #4]	; (8002858 <__errno+0x8>)
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	20000058 	.word	0x20000058

0800285c <__libc_init_array>:
 800285c:	b570      	push	{r4, r5, r6, lr}
 800285e:	4d0d      	ldr	r5, [pc, #52]	; (8002894 <__libc_init_array+0x38>)
 8002860:	4c0d      	ldr	r4, [pc, #52]	; (8002898 <__libc_init_array+0x3c>)
 8002862:	1b64      	subs	r4, r4, r5
 8002864:	10a4      	asrs	r4, r4, #2
 8002866:	2600      	movs	r6, #0
 8002868:	42a6      	cmp	r6, r4
 800286a:	d109      	bne.n	8002880 <__libc_init_array+0x24>
 800286c:	4d0b      	ldr	r5, [pc, #44]	; (800289c <__libc_init_array+0x40>)
 800286e:	4c0c      	ldr	r4, [pc, #48]	; (80028a0 <__libc_init_array+0x44>)
 8002870:	f000 f86e 	bl	8002950 <_init>
 8002874:	1b64      	subs	r4, r4, r5
 8002876:	10a4      	asrs	r4, r4, #2
 8002878:	2600      	movs	r6, #0
 800287a:	42a6      	cmp	r6, r4
 800287c:	d105      	bne.n	800288a <__libc_init_array+0x2e>
 800287e:	bd70      	pop	{r4, r5, r6, pc}
 8002880:	f855 3b04 	ldr.w	r3, [r5], #4
 8002884:	4798      	blx	r3
 8002886:	3601      	adds	r6, #1
 8002888:	e7ee      	b.n	8002868 <__libc_init_array+0xc>
 800288a:	f855 3b04 	ldr.w	r3, [r5], #4
 800288e:	4798      	blx	r3
 8002890:	3601      	adds	r6, #1
 8002892:	e7f2      	b.n	800287a <__libc_init_array+0x1e>
 8002894:	080039b0 	.word	0x080039b0
 8002898:	080039b0 	.word	0x080039b0
 800289c:	080039b0 	.word	0x080039b0
 80028a0:	080039b4 	.word	0x080039b4

080028a4 <__retarget_lock_acquire_recursive>:
 80028a4:	4770      	bx	lr

080028a6 <__retarget_lock_release_recursive>:
 80028a6:	4770      	bx	lr

080028a8 <strcpy>:
 80028a8:	4603      	mov	r3, r0
 80028aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80028ae:	f803 2b01 	strb.w	r2, [r3], #1
 80028b2:	2a00      	cmp	r2, #0
 80028b4:	d1f9      	bne.n	80028aa <strcpy+0x2>
 80028b6:	4770      	bx	lr

080028b8 <_free_r>:
 80028b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80028ba:	2900      	cmp	r1, #0
 80028bc:	d044      	beq.n	8002948 <_free_r+0x90>
 80028be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028c2:	9001      	str	r0, [sp, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f1a1 0404 	sub.w	r4, r1, #4
 80028ca:	bfb8      	it	lt
 80028cc:	18e4      	addlt	r4, r4, r3
 80028ce:	f7ff ff9b 	bl	8002808 <__malloc_lock>
 80028d2:	4a1e      	ldr	r2, [pc, #120]	; (800294c <_free_r+0x94>)
 80028d4:	9801      	ldr	r0, [sp, #4]
 80028d6:	6813      	ldr	r3, [r2, #0]
 80028d8:	b933      	cbnz	r3, 80028e8 <_free_r+0x30>
 80028da:	6063      	str	r3, [r4, #4]
 80028dc:	6014      	str	r4, [r2, #0]
 80028de:	b003      	add	sp, #12
 80028e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80028e4:	f7ff bf96 	b.w	8002814 <__malloc_unlock>
 80028e8:	42a3      	cmp	r3, r4
 80028ea:	d908      	bls.n	80028fe <_free_r+0x46>
 80028ec:	6825      	ldr	r5, [r4, #0]
 80028ee:	1961      	adds	r1, r4, r5
 80028f0:	428b      	cmp	r3, r1
 80028f2:	bf01      	itttt	eq
 80028f4:	6819      	ldreq	r1, [r3, #0]
 80028f6:	685b      	ldreq	r3, [r3, #4]
 80028f8:	1949      	addeq	r1, r1, r5
 80028fa:	6021      	streq	r1, [r4, #0]
 80028fc:	e7ed      	b.n	80028da <_free_r+0x22>
 80028fe:	461a      	mov	r2, r3
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	b10b      	cbz	r3, 8002908 <_free_r+0x50>
 8002904:	42a3      	cmp	r3, r4
 8002906:	d9fa      	bls.n	80028fe <_free_r+0x46>
 8002908:	6811      	ldr	r1, [r2, #0]
 800290a:	1855      	adds	r5, r2, r1
 800290c:	42a5      	cmp	r5, r4
 800290e:	d10b      	bne.n	8002928 <_free_r+0x70>
 8002910:	6824      	ldr	r4, [r4, #0]
 8002912:	4421      	add	r1, r4
 8002914:	1854      	adds	r4, r2, r1
 8002916:	42a3      	cmp	r3, r4
 8002918:	6011      	str	r1, [r2, #0]
 800291a:	d1e0      	bne.n	80028de <_free_r+0x26>
 800291c:	681c      	ldr	r4, [r3, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	6053      	str	r3, [r2, #4]
 8002922:	440c      	add	r4, r1
 8002924:	6014      	str	r4, [r2, #0]
 8002926:	e7da      	b.n	80028de <_free_r+0x26>
 8002928:	d902      	bls.n	8002930 <_free_r+0x78>
 800292a:	230c      	movs	r3, #12
 800292c:	6003      	str	r3, [r0, #0]
 800292e:	e7d6      	b.n	80028de <_free_r+0x26>
 8002930:	6825      	ldr	r5, [r4, #0]
 8002932:	1961      	adds	r1, r4, r5
 8002934:	428b      	cmp	r3, r1
 8002936:	bf04      	itt	eq
 8002938:	6819      	ldreq	r1, [r3, #0]
 800293a:	685b      	ldreq	r3, [r3, #4]
 800293c:	6063      	str	r3, [r4, #4]
 800293e:	bf04      	itt	eq
 8002940:	1949      	addeq	r1, r1, r5
 8002942:	6021      	streq	r1, [r4, #0]
 8002944:	6054      	str	r4, [r2, #4]
 8002946:	e7ca      	b.n	80028de <_free_r+0x26>
 8002948:	b003      	add	sp, #12
 800294a:	bd30      	pop	{r4, r5, pc}
 800294c:	2000013c 	.word	0x2000013c

08002950 <_init>:
 8002950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002952:	bf00      	nop
 8002954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002956:	bc08      	pop	{r3}
 8002958:	469e      	mov	lr, r3
 800295a:	4770      	bx	lr

0800295c <_fini>:
 800295c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295e:	bf00      	nop
 8002960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002962:	bc08      	pop	{r3}
 8002964:	469e      	mov	lr, r3
 8002966:	4770      	bx	lr
